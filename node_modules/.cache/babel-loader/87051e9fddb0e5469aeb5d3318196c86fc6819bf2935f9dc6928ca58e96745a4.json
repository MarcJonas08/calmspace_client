{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\regForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterForm = () => {\n  _s();\n  let {\n    authTokens,\n    user\n  } = useContext(AuthContext);\n  const [branches, setBranches] = useState([]);\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\n  const handleAppointmentTypeChange = appointmentType => {\n    setSelectedAppointmentType(appointmentType);\n  };\n  const [selectedBranch, setSelectedBranch] = useState(null);\n  useEffect(() => {\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${authTokens.access}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      setBranches(data);\n      // Select the first branch by default\n      if (data.length > 0) {\n        setSelectedBranch(data[0].id);\n      }\n    });\n  }, []);\n  const handleBranchClick = branchId => {\n    setSelectedBranch(branchId);\n    setSelectedDoctor(null);\n  };\n  const [doctors, setDoctors] = useState([]);\n  useEffect(() => {\n    if (selectedBranch) {\n      fetch('http://localhost:8000/api/clinic/doctors', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        // Filter the data based on the selected branch\n        const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\n        setDoctors(filteredData);\n      }).catch(error => console.error('Error fetching doctors:', error));\n    }\n  }, [selectedBranch]);\n  const [appointments, setAppointments] = useState([]);\n  useEffect(() => {\n    // Function to fetch appointments\n    const fetchAppointments = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/clinic/appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setAppointments(data);\n        } else {\n          console.error('Error fetching appointments:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n\n    // Fetch appointments initially\n    fetchAppointments();\n\n    // Set up polling with a 5-second interval\n    const pollingInterval = setInterval(() => {\n      fetchAppointments();\n    }, 5000);\n\n    // Clear the interval when the component unmounts\n    return () => clearInterval(pollingInterval);\n  }, [authTokens.access]);\n  const [advanceAppointments, setAdvanceAppointments] = useState([]);\n  useEffect(() => {\n    const fetchData = () => {\n      fetch('http://localhost:8000/api/clinic/advance-appointments', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        setAdvanceAppointments(data);\n      }).catch(error => console.error('Error fetching appointments:', error));\n    };\n\n    // Fetch data initially\n    fetchData();\n\n    // Set up polling with a 5-second interval\n    const intervalId = setInterval(() => {\n      fetchData();\n    }, 5000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [branches]);\n  const hasExistingScheduleForToday = async () => {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const response = await fetch('http://localhost:8000/api/clinic/clients', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return data.some(client => client.userID === user.user_id && client.appointment_date === today);\n      } else {\n        console.error('Error fetching clients:', response.statusText);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking existing schedule:', error);\n      return false;\n    }\n  };\n\n  // FUNCTIONS FOR ADDING CLIENTS\n\n  const [formData, setFormData] = useState({\n    first_name: '',\n    last_name: '',\n    age: '',\n    birthday: '',\n    contact_number: '',\n    emergency_contact_number: '',\n    email: '',\n    doctor: '',\n    appointment_date: '',\n    appointment_time: '',\n    medical_history: '',\n    status: 'active',\n    branch_id: '',\n    userID: null,\n    street_address: '',\n    barangay: '',\n    city_town: '',\n    province: '',\n    postal_code: '',\n    country: ''\n  });\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      branch_id: selectedBranch,\n      userID: user.user_id\n    });\n  }, [selectedBranch]);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const handleClientFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\n    try {\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\n        method: 'PATCH',\n        // Assuming you use a PATCH request to update the time field\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [timeField]: !currentValue\n        }) // Send the updated time field as false\n      });\n      if (response.ok) {\n        // Successfully updated the appointment time field\n        // You may want to refresh the data or handle it in a way that suits your application\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\n        fetch('http://localhost:8000/api/clinic/appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          setAppointments(data);\n        }).catch(error => console.error('Error fetching appointments:', error));\n      } else {\n        // Handle the error if the update request fails\n        console.error('Failed to update appointment time field');\n      }\n    } catch (error) {\n      console.error('Error updating appointment time field:', error);\n    }\n  };\n  const updateAdvanceAppointmentTime = async (appointmentId, timeField, currentValue) => {\n    try {\n      const response = await fetch(`http://localhost:8000/update-advance-appointment/${appointmentId}/`, {\n        method: 'PATCH',\n        // Assuming you use a PATCH request to update the time field\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [timeField]: !currentValue\n        }) // Send the updated time field as false\n      });\n      if (response.ok) {\n        // Successfully updated the appointment time field\n        // You may want to refresh the data or handle it in a way that suits your application\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\n        fetch('http://localhost:8000/api/clinic/advance-appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          // Filter the data based on the 'branch' field\n          const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\n          setAdvanceAppointments(filteredData);\n        }).catch(error => console.error('Error fetching appointments:', error));\n      } else {\n        // Handle the error if the update request fails\n        console.error('Failed to update appointment time field');\n      }\n    } catch (error) {\n      console.error('Error updating appointment time field:', error);\n    }\n  };\n  const [selectedAppointmentDate, setSelectedAppointmentDate] = useState('appointment'); // Default to 'appointment'\n\n  const checkTimeSlotAvailability = async selectedTimeSlot => {\n    try {\n      // Fetch the client database\n      const response = await fetch('http://localhost:8000/api/clinic/clients', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const clients = await response.json();\n\n        // Filter appointments for the selected time slot\n        const appointmentsForSlot = clients.filter(client => client.appointment_time === selectedTimeSlot);\n\n        // Return true if no appointments exist for the selected time slot, otherwise return false\n        return appointmentsForSlot.length === 0;\n      } else {\n        console.error('Error fetching clients:', response.statusText);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking time slot availability:', error);\n      return false;\n    }\n  };\n  const handleClientFormSubmit = async e => {\n    e.preventDefault();\n\n    // Display confirmation dialog\n    const userConfirmed = window.confirm('Do you want to submit the form?');\n    const existingScheduleForToday = await hasExistingScheduleForToday();\n    if (userConfirmed) {\n      console.log(formData);\n      setShowConfirmation(true);\n      if (existingScheduleForToday) {\n        window.alert('gago');\n      } else {\n        const isTimeSlotAvailable = checkTimeSlotAvailability(formData.appointment_time);\n        if (!isTimeSlotAvailable) {\n          window.alert('The selected time slot is not available.');\n        } else {\n          if (selectedAppointmentDate === 'appointment') {\n            try {\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${authTokens.access}`\n                },\n                body: JSON.stringify({\n                  first_name: formData.first_name.trim(),\n                  last_name: formData.last_name.trim(),\n                  age: formData.age.trim(),\n                  birthday: formData.birthday.trim(),\n                  contact_number: formData.contact_number.trim(),\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\n                  email: formData.email.trim(),\n                  doctor: formData.doctor,\n                  appointment_date: new Date().toISOString().split('T')[0],\n                  appointment_time: formData.appointment_time.trim(),\n                  medical_history: formData.medical_history.trim(),\n                  status: formData.status.trim(),\n                  branch: formData.branch_id,\n                  userID: formData.userID,\n                  street_address: formData.street_address.trim(),\n                  barangay: formData.barangay.trim(),\n                  city_town: formData.city_town.trim(),\n                  province: formData.province.trim(),\n                  postal_code: formData.postal_code.trim(),\n                  country: formData.country.trim()\n                })\n              });\n              if (response.ok) {\n                const data = await response.json();\n\n                // Reset the form data\n                setFormData({\n                  first_name: '',\n                  last_name: '',\n                  age: '',\n                  birthday: '',\n                  contact_number: '',\n                  emergency_contact_number: '',\n                  email: '',\n                  doctor: '',\n                  appointment_date: '',\n                  appointment_time: '',\n                  medical_history: '',\n                  street_address: '',\n                  barangay: '',\n                  city_town: '',\n                  province: '',\n                  postal_code: '',\n                  country: ''\n                });\n                updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\n\n                // Fetch the updated appointments if needed\n                // (You can replace this with direct state manipulation if necessary)\n                fetch('http://localhost:8000/api/clinic/appointments', {\n                  method: 'GET',\n                  headers: {\n                    'Authorization': `Bearer ${authTokens.access}`,\n                    'Content-type': 'application/json'\n                  }\n                }).then(response => response.json()).then(data => {\n                  setAppointments(data);\n                }).catch(error => console.error('Error fetching appointments:', error));\n              } else {\n                // Handle the error if the create request fails\n                console.error('Failed to create client:', response.statusText);\n              }\n            } catch (error) {}\n          } else if (selectedAppointmentDate === 'advance-appointment') {\n            const today = new Date();\n            const tomorrow = new Date(today);\n            tomorrow.setDate(today.getDate() + 1);\n            try {\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${authTokens.access}`\n                },\n                body: JSON.stringify({\n                  first_name: formData.first_name.trim(),\n                  last_name: formData.last_name.trim(),\n                  age: formData.age.trim(),\n                  birthday: formData.birthday.trim(),\n                  contact_number: formData.contact_number.trim(),\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\n                  email: formData.email.trim(),\n                  doctor: formData.doctor,\n                  appointment_date: tomorrow.toISOString().split('T')[0],\n                  appointment_time: formData.appointment_time.trim(),\n                  medical_history: formData.medical_history.trim(),\n                  status: formData.status.trim(),\n                  branch: formData.branch_id,\n                  userID: formData.userID,\n                  street_address: formData.street_address.trim(),\n                  barangay: formData.barangay.trim(),\n                  city_town: formData.city_town.trim(),\n                  province: formData.province.trim(),\n                  postal_code: formData.postal_code.trim(),\n                  country: formData.country.trim()\n                })\n              });\n              if (response.ok) {\n                const data = await response.json();\n\n                // Reset the form data\n                setFormData({\n                  first_name: '',\n                  last_name: '',\n                  age: '',\n                  birthday: '',\n                  contact_number: '',\n                  emergency_contact_number: '',\n                  email: '',\n                  doctor: '',\n                  appointment_date: '',\n                  appointment_time: '',\n                  medical_history: '',\n                  street_address: '',\n                  barangay: '',\n                  city_town: '',\n                  province: '',\n                  postal_code: '',\n                  country: ''\n                });\n                updateAdvanceAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\n\n                // Fetch the updated appointments if needed\n                // (You can replace this with direct state manipulation if necessary)\n                fetch('http://localhost:8000/api/clinic/advance-appointments', {\n                  method: 'GET',\n                  headers: {\n                    'Authorization': `Bearer ${authTokens.access}`,\n                    'Content-type': 'application/json'\n                  }\n                }).then(response => response.json()).then(data => {\n                  // Filter the data based on the 'branch' field\n                  const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\n                  setAdvanceAppointments(filteredData);\n                }).catch(error => console.error('Error fetching appointments:', error));\n              } else {\n                // Handle the error if the create request fails\n                console.error('Failed to create client:', response.statusText);\n              }\n            } catch (error) {}\n          }\n        }\n      }\n    } else {\n      // Handle cancellation if needed\n    }\n  };\n\n  // console.log('HAHHAAA: ', branchId)\n  console.log('HAHAHAHAHA: ', formData);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);\n  const [selectedTimeField, setSelectedTimeField] = useState(null);\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null);\n  const [selectedAdvanceAppointments, setSelectedAdvanceAppointments] = useState([]);\n\n  //appointmentId, timeField, currentValue\n\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      doctor: selectedDoctor ? selectedDoctor.id : '',\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : ''\n    });\n  }, [selectedDoctor, selectedTimeSlot]);\n  console.log(\"NAYAHA: \", formData);\n  useEffect(() => {\n    // Update selectedAppointments when selectedDoctor changes\n    if (selectedDoctor) {\n      const doctorAppointments = appointments.filter(appointment => appointment.doctor === selectedDoctor.id);\n      setSelectedAppointments(doctorAppointments);\n    }\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\n\n  useEffect(() => {\n    // Update selectedAppointments when selectedDoctor changes\n    if (selectedDoctor) {\n      const doctorAppointments = advanceAppointments.filter(appointment => appointment.doctor === selectedDoctor.id);\n      setSelectedAdvanceAppointments(doctorAppointments);\n    }\n  }, [selectedDoctor, doctors, advanceAppointments]); // Watch for changes in selectedDoctor\n\n  const handleDoctorClick = doctor => {\n    setSelectedDoctor(doctor);\n    setSelectedTimeSlot('');\n  };\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\n    setSelectedTimeSlot(timeSlot);\n    setSelectedAppointmentId(appointmentId);\n    setSelectedTimeField(timeField);\n    setSelectedCurrentValue(currentValue);\n  };\n  console.log(selectedAppointmentId, selectedCurrentValue, selectedTimeField);\n  console.log(selectedAppointmentDate);\n  const handleAppointmentToday = () => {\n    setSelectedAppointmentDate('appointment');\n    setSelectedTimeSlot('');\n  };\n  const handleAppointmentTomorrow = () => {\n    setSelectedAppointmentDate('advance-appointment');\n    setSelectedTimeSlot('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-client\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-branch-buttons\",\n        children: branches.map(branch => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleBranchClick(branch.id),\n          style: {\n            backgroundColor: selectedBranch === branch.id ? 'blue' : 'lightcoral'\n          },\n          children: branch.branch_name\n        }, branch.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDoctorClick(doctor),\n          style: {\n            backgroundColor: selectedDoctor === doctor ? 'blue' : 'lightcoral'\n          },\n          children: doctor.doctor_name\n        }, doctor.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 9\n      }, this), selectedDoctor && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAppointmentToday,\n          style: {\n            backgroundColor: selectedAppointmentDate === 'appointment' ? 'blue' : 'lightcoral'\n          },\n          children: \"Regular Appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAppointmentTomorrow,\n          style: {\n            backgroundColor: selectedAppointmentDate === 'advance-appointment' ? 'blue' : 'lightcoral'\n          },\n          children: \"Advance Appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 11\n      }, this), selectedDoctor && selectedAppointmentDate === 'appointment' && selectedAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Appointments for \", selectedDoctor.doctor_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_8am_9am,\n            style: {\n              backgroundColor: appointment.time_8am_9am || selectedTimeSlot === '8:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am),\n            children: \"8:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_9am_10am,\n            style: {\n              backgroundColor: appointment.time_9am_10am || selectedTimeSlot === '9:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am),\n            children: \"9:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_10am_11am,\n            style: {\n              backgroundColor: appointment.time_10am_11am || selectedTimeSlot === '10:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am),\n            children: \"10:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_11am_12pm,\n            style: {\n              backgroundColor: appointment.time_11am_12pm || selectedTimeSlot === '11:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm),\n            children: \"11:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_1pm_2pm,\n            style: {\n              backgroundColor: appointment.time_1pm_2pm || selectedTimeSlot === '1:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm),\n            children: \"1:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_2pm_3pm,\n            style: {\n              backgroundColor: appointment.time_2pm_3pm || selectedTimeSlot === '2:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm),\n            children: \"2:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_3pm_4pm,\n            style: {\n              backgroundColor: appointment.time_3pm_4pm || selectedTimeSlot === '3:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm),\n            children: \"3:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_4pm_5pm,\n            style: {\n              backgroundColor: appointment.time_4pm_5pm || selectedTimeSlot === '4:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm),\n            children: \"4:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 17\n      }, this), selectedDoctor && selectedAppointmentDate === 'advance-appointment' && selectedAdvanceAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"advance-appointment\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Appointments for \", selectedDoctor.doctor_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_8am_9am,\n            style: {\n              backgroundColor: appointment.time_8am_9am || selectedTimeSlot === '8:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am),\n            children: \"8:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 21\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_9am_10am,\n            style: {\n              backgroundColor: appointment.time_9am_10am || selectedTimeSlot === '9:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am),\n            children: \"9:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 21\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_10am_11am,\n            style: {\n              backgroundColor: appointment.time_10am_11am || selectedTimeSlot === '10:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am),\n            children: \"10:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 21\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_11am_12pm,\n            style: {\n              backgroundColor: appointment.time_11am_12pm || selectedTimeSlot === '11:00 AM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm),\n            children: \"11:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 21\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_1pm_2pm,\n            style: {\n              backgroundColor: appointment.time_1pm_2pm || selectedTimeSlot === '1:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm),\n            children: \"1:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 21\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_2pm_3pm,\n            style: {\n              backgroundColor: appointment.time_2pm_3pm || selectedTimeSlot === '2:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm),\n            children: \"2:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 21\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_3pm_4pm,\n            style: {\n              backgroundColor: appointment.time_3pm_4pm || selectedTimeSlot === '3:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm),\n            children: \"3:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 21\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_4pm_5pm,\n            style: {\n              backgroundColor: appointment.time_4pm_5pm || selectedTimeSlot === '4:00 PM' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm),\n            children: \"4:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleClientFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"First Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"first_name\",\n            value: formData.first_name,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Last Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"last_name\",\n            value: formData.last_name,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Age:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"age\",\n            value: formData.age,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Birthday:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"birthday\",\n            value: formData.birthday,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Contact Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"contact_number\",\n            value: formData.contact_number,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Emergency Contact Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"emergency_contact_number\",\n            value: formData.emergency_contact_number,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"email\",\n            value: formData.email,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Medical History:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"medical_history\",\n            value: formData.medical_history,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Street Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"street_address\",\n            value: formData.street_address,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Barangay:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"barangay\",\n            value: formData.barangay,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"City/Town:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"city_town\",\n            value: formData.city_town,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Province:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"province\",\n            value: formData.province,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Postal Code:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"postal_code\",\n            value: formData.postal_code,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Country:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"country\",\n            value: formData.country,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 580,\n    columnNumber: 5\n  }, this);\n};\n_s(RegisterForm, \"r7ANLRaqBvdc2jzn2tnmizf2RjI=\");\n_c = RegisterForm;\nexport default RegisterForm;\nvar _c;\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","RegisterForm","_s","authTokens","user","branches","setBranches","selectedAppointmentType","setSelectedAppointmentType","handleAppointmentTypeChange","appointmentType","selectedBranch","setSelectedBranch","fetch","method","headers","access","then","res","json","data","length","id","handleBranchClick","branchId","setSelectedDoctor","doctors","setDoctors","response","filteredData","filter","doctor","branch_name","catch","error","console","appointments","setAppointments","fetchAppointments","ok","statusText","pollingInterval","setInterval","clearInterval","advanceAppointments","setAdvanceAppointments","fetchData","intervalId","hasExistingScheduleForToday","today","Date","toISOString","split","some","client","userID","user_id","appointment_date","formData","setFormData","first_name","last_name","age","birthday","contact_number","emergency_contact_number","email","appointment_time","medical_history","status","branch_id","street_address","barangay","city_town","province","postal_code","country","showConfirmation","setShowConfirmation","handleClientFormChange","e","name","value","target","prevData","updateAppointmentTime","appointmentId","timeField","currentValue","body","JSON","stringify","log","updateAdvanceAppointmentTime","appointment","branch","selectedAppointmentDate","setSelectedAppointmentDate","checkTimeSlotAvailability","selectedTimeSlot","clients","appointmentsForSlot","handleClientFormSubmit","preventDefault","userConfirmed","window","confirm","existingScheduleForToday","alert","isTimeSlotAvailable","trim","selectedAppointmentId","selectedTimeField","selectedCurrentValue","tomorrow","setDate","getDate","selectedDoctor","selectedAppointments","setSelectedAppointments","setSelectedTimeSlot","setSelectedAppointmentId","setSelectedTimeField","setSelectedCurrentValue","selectedAdvanceAppointments","setSelectedAdvanceAppointments","doctorAppointments","handleDoctorClick","handleAppointmentTime","timeSlot","handleAppointmentToday","handleAppointmentTomorrow","children","className","map","onClick","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","doctor_name","disabled","time_8am_9am","time_9am_10am","time_10am_11am","time_11am_12pm","time_1pm_2pm","time_2pm_3pm","time_3pm_4pm","time_4pm_5pm","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/regForm.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport AuthContext from '../context/AuthContext'\r\n\r\nconst RegisterForm = () => {\r\n\r\n  let {authTokens, user} = useContext(AuthContext);\r\n\r\n\r\n  const [branches, setBranches] = useState([]);\r\n\r\n\r\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\r\n\r\n  const handleAppointmentTypeChange = (appointmentType) => {\r\n    setSelectedAppointmentType(appointmentType);\r\n  };\r\n\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${authTokens.access}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setBranches(data);\r\n        // Select the first branch by default\r\n        if (data.length > 0) {\r\n          setSelectedBranch(data[0].id);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const handleBranchClick = (branchId) => {\r\n    setSelectedBranch(branchId);\r\n    setSelectedDoctor(null)\r\n  };\r\n\r\n    const [doctors, setDoctors] = useState([]);\r\n\r\n    useEffect(() => {\r\n      if (selectedBranch) {\r\n        fetch('http://localhost:8000/api/clinic/doctors', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n          }\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            // Filter the data based on the selected branch\r\n            const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\r\n            setDoctors(filteredData);\r\n          })\r\n          .catch(error => console.error('Error fetching doctors:', error));\r\n      }\r\n    }, [selectedBranch]);\r\n\r\n\r\n    const [appointments, setAppointments] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Function to fetch appointments\r\n        const fetchAppointments = async () => {\r\n          try {\r\n            const response = await fetch('http://localhost:8000/api/clinic/appointments', {\r\n              method: 'GET',\r\n              headers: {\r\n                'Authorization': `Bearer ${authTokens.access}`,\r\n                'Content-type': 'application/json',\r\n              }\r\n            });\r\n    \r\n            if (response.ok) {\r\n              const data = await response.json();\r\n              setAppointments(data);\r\n            } else {\r\n              console.error('Error fetching appointments:', response.statusText);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching appointments:', error);\r\n          }\r\n        };\r\n    \r\n        // Fetch appointments initially\r\n        fetchAppointments();\r\n    \r\n        // Set up polling with a 5-second interval\r\n        const pollingInterval = setInterval(() => {\r\n          fetchAppointments();\r\n        }, 5000);\r\n    \r\n        // Clear the interval when the component unmounts\r\n        return () => clearInterval(pollingInterval);\r\n    \r\n      }, [authTokens.access]);\r\n\r\n      const [advanceAppointments, setAdvanceAppointments] = useState([]);\r\n\r\n      useEffect(() => {\r\n        const fetchData = () => {\r\n          fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${authTokens.access}`,\r\n              'Content-type': 'application/json'\r\n            }\r\n          })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              setAdvanceAppointments(data);\r\n            })\r\n            .catch(error => console.error('Error fetching appointments:', error));\r\n        };\r\n    \r\n        // Fetch data initially\r\n        fetchData();\r\n    \r\n        // Set up polling with a 5-second interval\r\n        const intervalId = setInterval(() => {\r\n          fetchData();\r\n        }, 5000);\r\n    \r\n        // Cleanup interval on component unmount\r\n        return () => clearInterval(intervalId);\r\n      }, [branches]);\r\n    \r\n\r\n    const hasExistingScheduleForToday = async () => {\r\n        try {\r\n          const today = new Date().toISOString().split('T')[0];\r\n          const response = await fetch('http://localhost:8000/api/clinic/clients', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${authTokens.access}`,\r\n              'Content-type': 'application/json',\r\n            }\r\n          });\r\n    \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            return data.some(\r\n              (client) =>\r\n                client.userID === user.user_id &&\r\n                client.appointment_date === today\r\n            );\r\n          } else {\r\n            console.error('Error fetching clients:', response.statusText);\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error checking existing schedule:', error);\r\n          return false;\r\n        }\r\n      };\r\n\r\n  // FUNCTIONS FOR ADDING CLIENTS\r\n\r\n  const [formData, setFormData] = useState({\r\n    first_name: '',\r\n    last_name: '',\r\n    age: '',\r\n    birthday: '',\r\n    contact_number: '',\r\n    emergency_contact_number: '',\r\n    email: '',\r\n    doctor: '',\r\n    appointment_date: '',\r\n    appointment_time: '',\r\n    medical_history: '',\r\n    status: 'active',\r\n    branch_id: '', \r\n    userID: null, \r\n    street_address: '',\r\n    barangay: '',\r\n    city_town: '',\r\n    province: '',\r\n    postal_code: '',\r\n    country: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      branch_id: selectedBranch,\r\n      userID: user.user_id\r\n    })\r\n  }, [selectedBranch])\r\n\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n  const handleClientFormChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\r\n        method: 'PATCH', // Assuming you use a PATCH request to update the time field\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ [timeField]: !currentValue }), // Send the updated time field as false\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the appointment time field\r\n        // You may want to refresh the data or handle it in a way that suits your application\r\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\r\n        fetch('http://localhost:8000/api/clinic/appointments', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n        }\r\n\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            setAppointments(data)\r\n          })\r\n          .catch(error => console.error('Error fetching appointments:', error));\r\n\r\n      } else {\r\n        // Handle the error if the update request fails\r\n        console.error('Failed to update appointment time field');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating appointment time field:', error);\r\n    }\r\n  };\r\n  const updateAdvanceAppointmentTime = async (appointmentId, timeField, currentValue) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/update-advance-appointment/${appointmentId}/`, {\r\n        method: 'PATCH', // Assuming you use a PATCH request to update the time field\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ [timeField]: !currentValue }), // Send the updated time field as false\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the appointment time field\r\n        // You may want to refresh the data or handle it in a way that suits your application\r\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\r\n        fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n        }\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            // Filter the data based on the 'branch' field\r\n            const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\r\n            setAdvanceAppointments(filteredData)\r\n          })\r\n          .catch(error => console.error('Error fetching appointments:', error));\r\n\r\n      } else {\r\n        // Handle the error if the update request fails\r\n        console.error('Failed to update appointment time field');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating appointment time field:', error);\r\n    }\r\n  };\r\n\r\n  const [selectedAppointmentDate, setSelectedAppointmentDate] = useState('appointment'); // Default to 'appointment'\r\n\r\n  const checkTimeSlotAvailability = async (selectedTimeSlot) => {\r\n    try {\r\n      // Fetch the client database\r\n      const response = await fetch('http://localhost:8000/api/clinic/clients', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-type': 'application/json',\r\n        },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const clients = await response.json();\r\n        \r\n        // Filter appointments for the selected time slot\r\n        const appointmentsForSlot = clients.filter(client => client.appointment_time === selectedTimeSlot);\r\n        \r\n        // Return true if no appointments exist for the selected time slot, otherwise return false\r\n        return appointmentsForSlot.length === 0;\r\n      } else {\r\n        console.error('Error fetching clients:', response.statusText);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking time slot availability:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleClientFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Display confirmation dialog\r\n    const userConfirmed = window.confirm('Do you want to submit the form?');\r\n    const existingScheduleForToday = await hasExistingScheduleForToday();\r\n\r\n    if (userConfirmed) {\r\n      console.log(formData);\r\n      setShowConfirmation(true);\r\n\r\n      if (existingScheduleForToday){\r\n        window.alert('gago')\r\n      } else{\r\n\r\n        const isTimeSlotAvailable = checkTimeSlotAvailability(formData.appointment_time);\r\n\r\n        if (!isTimeSlotAvailable) {\r\n          window.alert('The selected time slot is not available.');\r\n        } else {\r\n          if (selectedAppointmentDate === 'appointment'){\r\n            try{\r\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${authTokens.access}`,\r\n                },\r\n                body: JSON.stringify({\r\n                  first_name: formData.first_name.trim(),\r\n                  last_name: formData.last_name.trim(),\r\n                  age: formData.age.trim(),\r\n                  birthday: formData.birthday.trim(),\r\n                  contact_number: formData.contact_number.trim(),\r\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\r\n                  email: formData.email.trim(),\r\n                  doctor: formData.doctor,\r\n                  appointment_date: new Date().toISOString().split('T')[0],\r\n                  appointment_time: formData.appointment_time.trim(),\r\n                  medical_history: formData.medical_history.trim(),\r\n                  status: formData.status.trim(),\r\n                  branch: formData.branch_id,\r\n                  userID: formData.userID,\r\n                  street_address: formData.street_address.trim(),\r\n                  barangay: formData.barangay.trim(),\r\n                  city_town: formData.city_town.trim(),\r\n                  province: formData.province.trim(),\r\n                  postal_code: formData.postal_code.trim(),\r\n                  country: formData.country.trim(),\r\n                }),\r\n              })\r\n      \r\n                if (response.ok) {\r\n                  const data = await response.json();\r\n      \r\n                  // Reset the form data\r\n                  setFormData({\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    age: '',\r\n                    birthday: '',\r\n                    contact_number: '',\r\n                    emergency_contact_number: '',\r\n                    email: '',\r\n                    doctor: '',\r\n                    appointment_date: '',\r\n                    appointment_time: '',\r\n                    medical_history: '',\r\n                    street_address: '',\r\n                    barangay: '',\r\n                    city_town: '',\r\n                    province: '',\r\n                    postal_code: '',\r\n                    country: '',\r\n                  });\r\n      \r\n                  updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\r\n          \r\n                  // Fetch the updated appointments if needed\r\n                  // (You can replace this with direct state manipulation if necessary)\r\n                  fetch('http://localhost:8000/api/clinic/appointments', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Authorization': `Bearer ${authTokens.access}`,\r\n                      'Content-type': 'application/json',\r\n                    },\r\n                  })\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                    setAppointments(data);\r\n                  })\r\n                  .catch(error => console.error('Error fetching appointments:', error));\r\n                } else {\r\n                  // Handle the error if the create request fails\r\n                  console.error('Failed to create client:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n  \r\n            }\r\n          } else if (selectedAppointmentDate === 'advance-appointment'){\r\n            const today = new Date();\r\n            const tomorrow = new Date(today);\r\n            tomorrow.setDate(today.getDate() + 1);\r\n  \r\n            try{\r\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${authTokens.access}`,\r\n                },\r\n                body: JSON.stringify({\r\n                  first_name: formData.first_name.trim(),\r\n                  last_name: formData.last_name.trim(),\r\n                  age: formData.age.trim(),\r\n                  birthday: formData.birthday.trim(),\r\n                  contact_number: formData.contact_number.trim(),\r\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\r\n                  email: formData.email.trim(),\r\n                  doctor: formData.doctor,\r\n                  appointment_date: tomorrow.toISOString().split('T')[0],\r\n                  appointment_time: formData.appointment_time.trim(),\r\n                  medical_history: formData.medical_history.trim(),\r\n                  status: formData.status.trim(),\r\n                  branch: formData.branch_id,\r\n                  userID: formData.userID,\r\n                  street_address: formData.street_address.trim(),\r\n                  barangay: formData.barangay.trim(),\r\n                  city_town: formData.city_town.trim(),\r\n                  province: formData.province.trim(),\r\n                  postal_code: formData.postal_code.trim(),\r\n                  country: formData.country.trim(),\r\n                }),\r\n              })\r\n      \r\n                if (response.ok) {\r\n                  const data = await response.json();\r\n      \r\n                  // Reset the form data\r\n                  setFormData({\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    age: '',\r\n                    birthday: '',\r\n                    contact_number: '',\r\n                    emergency_contact_number: '',\r\n                    email: '',\r\n                    doctor: '',\r\n                    appointment_date: '',\r\n                    appointment_time: '',\r\n                    medical_history: '',\r\n                    street_address: '',\r\n                    barangay: '',\r\n                    city_town: '',\r\n                    province: '',\r\n                    postal_code: '',\r\n                    country: '',\r\n                  });\r\n      \r\n                  updateAdvanceAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\r\n          \r\n                  // Fetch the updated appointments if needed\r\n                  // (You can replace this with direct state manipulation if necessary)\r\n                  fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Authorization': `Bearer ${authTokens.access}`,\r\n                      'Content-type': 'application/json',\r\n                    },\r\n                  })\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                    // Filter the data based on the 'branch' field\r\n                    const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\r\n                    setAdvanceAppointments(filteredData);\r\n                  })\r\n                  .catch(error => console.error('Error fetching appointments:', error));\r\n                } else {\r\n                  // Handle the error if the create request fails\r\n                  console.error('Failed to create client:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n              \r\n            }\r\n          }\r\n  \r\n        }\r\n          \r\n\r\n      }\r\n\r\n    } else {\r\n      // Handle cancellation if needed\r\n    }\r\n  };\r\n\r\n  // console.log('HAHHAAA: ', branchId)\r\n  console.log('HAHAHAHAHA: ', formData)\r\n\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null)\r\n  const [selectedTimeField, setSelectedTimeField] = useState(null)\r\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null)\r\n\r\n  const [selectedAdvanceAppointments, setSelectedAdvanceAppointments] = useState([]);\r\n\r\n  //appointmentId, timeField, currentValue\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      doctor: selectedDoctor ? selectedDoctor.id : '',\r\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : '',\r\n    })\r\n  }, [selectedDoctor, selectedTimeSlot])\r\n\r\n  console.log(\"NAYAHA: \", formData)\r\n\r\n  useEffect(() => {\r\n    // Update selectedAppointments when selectedDoctor changes\r\n    if (selectedDoctor) {\r\n      const doctorAppointments = appointments.filter(\r\n        (appointment) => appointment.doctor === selectedDoctor.id\r\n      );\r\n      setSelectedAppointments(doctorAppointments);\r\n    }\r\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\r\n\r\n  useEffect(() => {\r\n    // Update selectedAppointments when selectedDoctor changes\r\n    if (selectedDoctor) {\r\n      const doctorAppointments = advanceAppointments.filter(\r\n        (appointment) => appointment.doctor === selectedDoctor.id\r\n      );\r\n      setSelectedAdvanceAppointments(doctorAppointments);\r\n    }\r\n  }, [selectedDoctor, doctors, advanceAppointments]); // Watch for changes in selectedDoctor\r\n\r\n  const handleDoctorClick = (doctor) => {\r\n    setSelectedDoctor(doctor);\r\n    setSelectedTimeSlot('');\r\n  };\r\n\r\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\r\n    setSelectedTimeSlot(timeSlot);\r\n    setSelectedAppointmentId(appointmentId);\r\n    setSelectedTimeField(timeField);\r\n    setSelectedCurrentValue(currentValue);\r\n  }\r\n\r\n  console.log(selectedAppointmentId, selectedCurrentValue, selectedTimeField)\r\n\r\n  console.log(selectedAppointmentDate)\r\n\r\n  const handleAppointmentToday = () => {\r\n    setSelectedAppointmentDate('appointment')\r\n    setSelectedTimeSlot('');\r\n  }\r\n\r\n  const handleAppointmentTomorrow = () => {\r\n    setSelectedAppointmentDate('advance-appointment')\r\n    setSelectedTimeSlot('');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='add-client'>\r\n\r\n        <div className='select-branch-buttons'>\r\n            {branches.map((branch) => (\r\n            <button\r\n                key={branch.id}\r\n                onClick={() => handleBranchClick(branch.id)}\r\n                style={{ backgroundColor: selectedBranch === branch.id ? 'blue' : 'lightcoral' }}\r\n            >\r\n                {branch.branch_name}\r\n            </button>\r\n            ))}\r\n        </div>\r\n\r\n        <div>\r\n            {doctors.map((doctor) => (\r\n            <button key={doctor.id} onClick={() => handleDoctorClick(doctor)}\r\n            style={{backgroundColor: selectedDoctor === doctor ? 'blue' : 'lightcoral'}}>\r\n                {doctor.doctor_name}\r\n            </button>\r\n            ))}\r\n        </div>\r\n\r\n        {selectedDoctor && (\r\n          <div>\r\n            <button\r\n              onClick={handleAppointmentToday}\r\n              style={{ backgroundColor: selectedAppointmentDate === 'appointment' ? 'blue' : 'lightcoral' }}\r\n            >\r\n              Regular Appointment\r\n            </button>\r\n            <button\r\n              onClick={handleAppointmentTomorrow}\r\n              style={{ backgroundColor: selectedAppointmentDate === 'advance-appointment' ? 'blue' : 'lightcoral' }}\r\n            >\r\n              Advance Appointment\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {selectedDoctor && selectedAppointmentDate === 'appointment' && selectedAppointments.length > 0 && (\r\n                <div className='appointment'>\r\n                <h3>Appointments for {selectedDoctor.doctor_name}</h3>\r\n                <ul>\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_8am_9am} style={{backgroundColor: appointment.time_8am_9am || selectedTimeSlot === '8:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am)}>8:00 AM</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_9am_10am} style={{backgroundColor: appointment.time_9am_10am || selectedTimeSlot === '9:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am)}>9:00 AM</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_10am_11am} style={{backgroundColor: appointment.time_10am_11am || selectedTimeSlot === '10:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am)}>10:00 AM</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_11am_12pm} style={{backgroundColor: appointment.time_11am_12pm || selectedTimeSlot === '11:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm)}>11:00 AM</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_1pm_2pm} style={{backgroundColor: appointment.time_1pm_2pm || selectedTimeSlot === '1:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm)}>1:00 PM</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_2pm_3pm} style={{backgroundColor: appointment.time_2pm_3pm || selectedTimeSlot === '2:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm)}>2:00 PM</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_3pm_4pm} style={{backgroundColor: appointment.time_3pm_4pm || selectedTimeSlot === '3:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm)}>3:00 PM</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_4pm_5pm} style={{backgroundColor: appointment.time_4pm_5pm || selectedTimeSlot === '4:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm)}>4:00 PM</button>\r\n                    ))}\r\n                </ul>\r\n                </div>\r\n            )}\r\n\r\n              {selectedDoctor && selectedAppointmentDate === 'advance-appointment' && selectedAdvanceAppointments.length > 0 && (\r\n                <div className='advance-appointment'>\r\n                <h3>Appointments for {selectedDoctor.doctor_name}</h3>\r\n                <ul>\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_8am_9am} style={{backgroundColor: appointment.time_8am_9am || selectedTimeSlot === '8:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am)}>8:00 AM</button>\r\n                    ))}\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_9am_10am} style={{backgroundColor: appointment.time_9am_10am || selectedTimeSlot === '9:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am)}>9:00 AM</button>\r\n                    ))}\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_10am_11am} style={{backgroundColor: appointment.time_10am_11am || selectedTimeSlot === '10:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am)}>10:00 AM</button>\r\n                    ))}\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_11am_12pm} style={{backgroundColor: appointment.time_11am_12pm || selectedTimeSlot === '11:00 AM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm)}>11:00 AM</button>\r\n                    ))}\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_1pm_2pm} style={{backgroundColor: appointment.time_1pm_2pm || selectedTimeSlot === '1:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm)}>1:00 PM</button>\r\n                    ))}\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_2pm_3pm} style={{backgroundColor: appointment.time_2pm_3pm || selectedTimeSlot === '2:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm)}>2:00 PM</button>\r\n                    ))}\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_3pm_4pm} style={{backgroundColor: appointment.time_3pm_4pm || selectedTimeSlot === '3:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm)}>3:00 PM</button>\r\n                    ))}\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_4pm_5pm} style={{backgroundColor: appointment.time_4pm_5pm || selectedTimeSlot === '4:00 PM' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm)}>4:00 PM</button>\r\n                    ))}\r\n                </ul>\r\n                </div>\r\n            )}\r\n\r\n        <form onSubmit={handleClientFormSubmit}>\r\n        <label>\r\n            First Name:\r\n            <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            value={formData.first_name}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Last Name:\r\n            <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            value={formData.last_name}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Age:\r\n            <input\r\n            type=\"text\"\r\n            name=\"age\"\r\n            value={formData.age}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Birthday:\r\n            <input\r\n            type=\"text\"\r\n            name=\"birthday\"\r\n            value={formData.birthday}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Contact Number:\r\n            <input\r\n            type=\"text\"\r\n            name=\"contact_number\"\r\n            value={formData.contact_number}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Emergency Contact Number:\r\n            <input\r\n            type=\"text\"\r\n            name=\"emergency_contact_number\"\r\n            value={formData.emergency_contact_number}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Email:\r\n            <input\r\n            type=\"text\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Medical History:\r\n            <textarea\r\n            name=\"medical_history\"\r\n            value={formData.medical_history}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Street Address:\r\n            <input\r\n              type=\"text\"\r\n              name=\"street_address\"\r\n              value={formData.street_address}\r\n              onChange={handleClientFormChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Barangay:\r\n            <input\r\n              type=\"text\"\r\n              name=\"barangay\"\r\n              value={formData.barangay}\r\n              onChange={handleClientFormChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            City/Town:\r\n            <input\r\n              type=\"text\"\r\n              name=\"city_town\"\r\n              value={formData.city_town}\r\n              onChange={handleClientFormChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Province:\r\n            <input\r\n              type=\"text\"\r\n              name=\"province\"\r\n              value={formData.province}\r\n              onChange={handleClientFormChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Postal Code:\r\n            <input\r\n              type=\"text\"\r\n              name=\"postal_code\"\r\n              value={formData.postal_code}\r\n              onChange={handleClientFormChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Country:\r\n            <input\r\n              type=\"text\"\r\n              name=\"country\"\r\n              value={formData.country}\r\n              onChange={handleClientFormChange}\r\n            />\r\n          </label>\r\n\r\n        {/* Add your branch_id and userID input fields here */}\r\n\r\n        <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default RegisterForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}