{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { createContext } from \"react\";\nimport { gameLetters } from \"../utils/letters\";\nimport { gameWords } from \"../utils/words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameContext = /*#__PURE__*/createContext();\nexport const GameProvider = ({\n  children\n}) => {\n  _s();\n  const [matchLetters, setMatchLetters] = useState([]);\n  const [matchWords, setMatchWords] = useState([]);\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const [guessedWords, setGuessedWords] = useState([]);\n  const [percentCompleted, setPercentCompleted] = useState(0);\n  const [clueCounter, setClueCounter] = useState(3);\n  const [clueWord, setClueWord] = useState(null);\n  const [guessingAttempts, setGuessingAttempts] = useState(0);\n  const [error, setError] = useState(null);\n  const setMatch = () => {\n    setMatchLetters([]);\n    setMatchWords([]);\n    setGuessedWords([]);\n    setSelectedLetters([]);\n    setGuessingAttempts(0);\n    setClueCounter(3);\n    setClueWord(null);\n    setError(null);\n    setPercentCompleted(0);\n    const randInt = Math.floor(Math.random() * 5);\n    let objectLetters = [];\n    gameLetters[randInt].forEach((letter, index) => {\n      objectLetters.push({\n        id: index,\n        value: letter\n      });\n    });\n    setMatchLetters(objectLetters);\n    let upperCasedWords = [];\n    gameWords[randInt].forEach(word => {\n      upperCasedWords.push(word.toUpperCase());\n    });\n    setMatchWords(upperCasedWords);\n  };\n  const resetError = () => {\n    setTimeout(() => {\n      setError(null);\n    }, 2000);\n  };\n  useEffect(() => {\n    setMatch();\n  }, []);\n  useEffect(() => {}, [error]);\n  const handleClickLetterBtn = e => {\n    const id = Number(e.target.value);\n    let letter = matchLetters.find(letter => letter.id === id);\n    console.log(letter);\n    if (!selectedLetters.includes(letter)) {\n      setSelectedLetters([...selectedLetters, letter]);\n    } else {\n      const index = selectedLetters.findIndex(letter => letter.id === id);\n      const updatedSelectedLetters = [...selectedLetters];\n      updatedSelectedLetters.splice(index, 1);\n      setSelectedLetters(updatedSelectedLetters);\n    }\n  };\n  const handleClickMergeLetters = () => {\n    let lettersValues = [];\n    selectedLetters.forEach(letter => lettersValues.push(letter.value));\n    console.log(lettersValues);\n    let formedWord = lettersValues.join(\"\");\n    console.log(formedWord);\n    if (matchWords.includes(formedWord)) {\n      if (guessedWords.includes(formedWord)) {\n        setSelectedLetters([]);\n        setError(\"Word already guessed!\");\n        resetError();\n        setGuessingAttempts(guessingAttempts + 1);\n      } else {\n        setError(null);\n        setSelectedLetters([]);\n        setGuessedWords([...guessedWords, formedWord]);\n        setPercentCompleted(percentCompleted + 5);\n      }\n    } else {\n      setSelectedLetters([]);\n      setError(\"Incorrect word!\");\n      resetError();\n      setGuessingAttempts(guessingAttempts + 1);\n    }\n  };\n  const handleClickClueBtn = () => {\n    if (clueCounter > 0) {\n      let randInt = Math.floor(Math.random() * matchWords.length);\n      if (guessedWords.includes(matchWords[randInt])) {\n        randInt -= 1;\n        setClueWord(matchWords[randInt]);\n      } else {\n        setClueWord(matchWords[randInt]);\n      }\n      setClueCounter(clueCounter - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      setMatch,\n      matchLetters,\n      matchWords,\n      selectedLetters,\n      guessedWords,\n      clueCounter,\n      clueWord,\n      guessingAttempts,\n      percentCompleted,\n      handleClickLetterBtn,\n      handleClickMergeLetters,\n      handleClickClueBtn,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(GameProvider, \"lqXYbUIVGw2vZuxAILxE04I1TBQ=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["useEffect","useState","createContext","gameLetters","gameWords","jsxDEV","_jsxDEV","GameContext","GameProvider","children","_s","matchLetters","setMatchLetters","matchWords","setMatchWords","selectedLetters","setSelectedLetters","guessedWords","setGuessedWords","percentCompleted","setPercentCompleted","clueCounter","setClueCounter","clueWord","setClueWord","guessingAttempts","setGuessingAttempts","error","setError","setMatch","randInt","Math","floor","random","objectLetters","forEach","letter","index","push","id","value","upperCasedWords","word","toUpperCase","resetError","setTimeout","handleClickLetterBtn","e","Number","target","find","console","log","includes","findIndex","updatedSelectedLetters","splice","handleClickMergeLetters","lettersValues","formedWord","join","handleClickClueBtn","length","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/context/GameContext.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { createContext } from \"react\";\nimport { gameLetters } from \"../utils/letters\";\nimport { gameWords } from \"../utils/words\";\n\nexport const GameContext = createContext();\n\nexport const GameProvider = ({ children }) => {\n  const [matchLetters, setMatchLetters] = useState([]);\n  const [matchWords, setMatchWords] = useState([]);\n\n  const [selectedLetters, setSelectedLetters] = useState([]);\n\n  const [guessedWords, setGuessedWords] = useState([]);\n\n  const [percentCompleted, setPercentCompleted] = useState(0);\n\n  const [clueCounter, setClueCounter] = useState(3);\n  const [clueWord, setClueWord] = useState(null);\n\n  const [guessingAttempts, setGuessingAttempts] = useState(0);\n  const [error, setError] = useState(null);\n\n  const setMatch = () => {\n    setMatchLetters([]);\n    setMatchWords([]);\n    setGuessedWords([]);\n    setSelectedLetters([]);\n    setGuessingAttempts(0);\n    setClueCounter(3);\n    setClueWord(null);\n    setError(null);\n    setPercentCompleted(0);\n\n    const randInt = Math.floor(Math.random() * 5);\n    let objectLetters = [];\n    gameLetters[randInt].forEach((letter, index) => {\n      objectLetters.push({ id: index, value: letter });\n    });\n\n    setMatchLetters(objectLetters);\n\n    let upperCasedWords = [];\n    gameWords[randInt].forEach((word) => {\n      upperCasedWords.push(word.toUpperCase());\n    });\n\n    setMatchWords(upperCasedWords);\n  };\n\n  const resetError = () => {\n    setTimeout(() => {\n      setError(null);\n    }, 2000);\n  };\n\n  useEffect(() => {\n    setMatch();\n  }, []);\n\n  useEffect(() => {}, [error]);\n\n  const handleClickLetterBtn = (e) => {\n    const id = Number(e.target.value);\n    let letter = matchLetters.find((letter) => letter.id === id);\n    console.log(letter);\n    if (!selectedLetters.includes(letter)) {\n      setSelectedLetters([...selectedLetters, letter]);\n    } else {\n      const index = selectedLetters.findIndex((letter) => letter.id === id);\n      const updatedSelectedLetters = [...selectedLetters];\n      updatedSelectedLetters.splice(index, 1);\n      setSelectedLetters(updatedSelectedLetters);\n    }\n  };\n  const handleClickMergeLetters = () => {\n    let lettersValues = [];\n    selectedLetters.forEach((letter) => lettersValues.push(letter.value));\n    console.log(lettersValues);\n    let formedWord = lettersValues.join(\"\");\n    console.log(formedWord);\n    if (matchWords.includes(formedWord)) {\n      if (guessedWords.includes(formedWord)) {\n        setSelectedLetters([]);\n        setError(\"Word already guessed!\");\n        resetError();\n        setGuessingAttempts(guessingAttempts + 1);\n      } else {\n        setError(null);\n        setSelectedLetters([]);\n        setGuessedWords([...guessedWords, formedWord]);\n        setPercentCompleted(percentCompleted + 5);\n      }\n    } else {\n      setSelectedLetters([]);\n      setError(\"Incorrect word!\");\n      resetError();\n      setGuessingAttempts(guessingAttempts + 1);\n    }\n  };\n\n  const handleClickClueBtn = () => {\n    if (clueCounter > 0) {\n      let randInt = Math.floor(Math.random() * matchWords.length);\n\n      if (guessedWords.includes(matchWords[randInt])) {\n        randInt -= 1;\n        setClueWord(matchWords[randInt]);\n      } else {\n        setClueWord(matchWords[randInt]);\n      }\n\n      setClueCounter(clueCounter - 1);\n    }\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        setMatch,\n        matchLetters,\n        matchWords,\n        selectedLetters,\n        guessedWords,\n        clueCounter,\n        clueWord,\n        guessingAttempts,\n        percentCompleted,\n        handleClickLetterBtn,\n        handleClickMergeLetters,\n        handleClickClueBtn,\n        error,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}