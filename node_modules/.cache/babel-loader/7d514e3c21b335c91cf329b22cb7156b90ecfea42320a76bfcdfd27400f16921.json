{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\nexport const usePlayer = () => {\n  _s();\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    colided: false\n  });\n  const rotate = (matrix, dir) => {\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  };\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n_s(usePlayer, \"kSOCQC8WuBJSpql815U7kpv+x0E=\");","map":{"version":3,"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","_s","player","setPlayer","pos","x","y","tetromino","shape","colided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","collided","prev","resetPlayer"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/hooks/usePlayer.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        colided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        const rotatedTetro = matrix.map(( _, index ) => \n            matrix.map( col => col[index] ),\n        );\n        if (dir > 0) \n            return rotatedTetro.map(row => row.reverse());\n\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, {x: 0, y: 0})){\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if(offset > clonedPlayer.tetromino[0].length){\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n    };\n\n    const updatePlayerPos = ({ x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }));\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}