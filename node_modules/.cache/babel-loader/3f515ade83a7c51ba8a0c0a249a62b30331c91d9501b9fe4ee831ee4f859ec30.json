{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\game\\\\mind_game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './mind_game.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindGame = () => {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [flippedCards, setFlippedCards] = useState(0);\n  const [totalFlips, setTotalFlips] = useState(0);\n  const [totalTime, setTotalTime] = useState(0);\n  const [boardDimensions, setBoardDimensions] = useState(4);\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    generateGame();\n  }, []);\n  const shuffle = array => {\n    const clonedArray = [...array];\n    for (let i = clonedArray.length - 1; i > 0; i--) {\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n      const original = clonedArray[i];\n      clonedArray[i] = clonedArray[randomIndex];\n      clonedArray[randomIndex] = original;\n    }\n    return clonedArray;\n  };\n  const pickRandom = (array, items) => {\n    const clonedArray = [...array];\n    const randomPicks = [];\n    for (let i = 0; i < items; i++) {\n      const randomIndex = Math.floor(Math.random() * clonedArray.length);\n      randomPicks.push(clonedArray[randomIndex]);\n      clonedArray.splice(randomIndex, 1);\n    }\n    return randomPicks;\n  };\n  const generateGame = () => {\n    if (boardDimensions % 2 !== 0) {\n      throw new Error('The dimension of the board must be an even number.');\n    }\n    const emojis = ['🥔', '🍒', '🥑', '🌽', '🥕', '🍇', '🍉', '🍌', '🥭', '🍍'];\n    const picks = pickRandom(emojis, boardDimensions * boardDimensions / 2);\n    const items = shuffle([...picks, ...picks]);\n    const initialCards = items.map(emoji => ({\n      emoji,\n      flipped: false,\n      matched: false\n    }));\n    setCards(initialCards);\n  };\n  const startGame = () => {\n    setGameStarted(true);\n    setTotalFlips(0);\n    const interval = setInterval(() => {\n      setTotalTime(prevTime => prevTime + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  };\n  const flipCard = index => {\n    setFlippedCards(prevFlipped => prevFlipped + 1);\n    setTotalFlips(prevFlips => prevFlips + 1);\n    if (!gameStarted) {\n      startGame();\n    }\n    if (flippedCards <= 1) {\n      const updatedCards = [...cards];\n      updatedCards[index].flipped = true;\n      setCards(updatedCards);\n    }\n    if (flippedCards === 1) {\n      const flippedIndexes = cards.reduce((acc, card, i) => card.flipped ? [...acc, i] : acc, []);\n      if (cards[flippedIndexes[0]].emoji === cards[flippedIndexes[1]].emoji) {\n        const updatedCards = [...cards];\n        updatedCards[flippedIndexes[0]].matched = true;\n        updatedCards[flippedIndexes[1]].matched = true;\n        setCards(updatedCards);\n      }\n      setTimeout(() => {\n        setFlippedCards(0);\n      }, 1000);\n    }\n  };\n  const renderCard = (card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `card ${card.flipped ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`,\n    onClick: () => flipCard(index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: card.flipped ? card.emoji : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        disabled: gameStarted,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"moves\",\n          children: [totalFlips, \" moves\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: [\"Time: \", totalTime, \" sec\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        style: {\n          gridTemplateColumns: `repeat(${boardDimensions}, auto)`\n        },\n        children: cards.map((card, index) => renderCard(card, index))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), cards.every(card => card.matched) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"win\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"win-text\",\n          children: [\"You won!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 23\n          }, this), \"with \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"highlight\",\n            children: totalFlips\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 20\n          }, this), \" moves\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 73\n          }, this), \"under \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"highlight\",\n            children: totalTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this), \" seconds\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(MindGame, \"i04SWB3kxr2iU36fKmTTyKymErc=\");\n_c = MindGame;\nexport default MindGame;\nvar _c;\n$RefreshReg$(_c, \"MindGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MindGame","_s","gameStarted","setGameStarted","flippedCards","setFlippedCards","totalFlips","setTotalFlips","totalTime","setTotalTime","boardDimensions","setBoardDimensions","cards","setCards","generateGame","shuffle","array","clonedArray","i","length","randomIndex","Math","floor","random","original","pickRandom","items","randomPicks","push","splice","Error","emojis","picks","initialCards","map","emoji","flipped","matched","startGame","interval","setInterval","prevTime","clearInterval","flipCard","index","prevFlipped","prevFlips","updatedCards","flippedIndexes","reduce","acc","card","setTimeout","renderCard","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","style","gridTemplateColumns","every","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/game/mind_game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './mind_game.css'; // Import your CSS file\r\n\r\nconst MindGame = () => {\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [flippedCards, setFlippedCards] = useState(0);\r\n  const [totalFlips, setTotalFlips] = useState(0);\r\n  const [totalTime, setTotalTime] = useState(0);\r\n  const [boardDimensions, setBoardDimensions] = useState(4);\r\n  const [cards, setCards] = useState([]);\r\n\r\n  useEffect(() => {\r\n    generateGame();\r\n  }, []);\r\n\r\n  const shuffle = (array) => {\r\n    const clonedArray = [...array];\r\n\r\n    for (let i = clonedArray.length - 1; i > 0; i--) {\r\n      const randomIndex = Math.floor(Math.random() * (i + 1));\r\n      const original = clonedArray[i];\r\n\r\n      clonedArray[i] = clonedArray[randomIndex];\r\n      clonedArray[randomIndex] = original;\r\n    }\r\n\r\n    return clonedArray;\r\n  };\r\n\r\n  const pickRandom = (array, items) => {\r\n    const clonedArray = [...array];\r\n    const randomPicks = [];\r\n\r\n    for (let i = 0; i < items; i++) {\r\n      const randomIndex = Math.floor(Math.random() * clonedArray.length);\r\n\r\n      randomPicks.push(clonedArray[randomIndex]);\r\n      clonedArray.splice(randomIndex, 1);\r\n    }\r\n\r\n    return randomPicks;\r\n  };\r\n\r\n  const generateGame = () => {\r\n    if (boardDimensions % 2 !== 0) {\r\n      throw new Error('The dimension of the board must be an even number.');\r\n    }\r\n\r\n    const emojis = ['🥔', '🍒', '🥑', '🌽', '🥕', '🍇', '🍉', '🍌', '🥭', '🍍'];\r\n    const picks = pickRandom(emojis, (boardDimensions * boardDimensions) / 2);\r\n    const items = shuffle([...picks, ...picks]);\r\n\r\n    const initialCards = items.map((emoji) => ({\r\n      emoji,\r\n      flipped: false,\r\n      matched: false,\r\n    }));\r\n\r\n    setCards(initialCards);\r\n  };\r\n\r\n  const startGame = () => {\r\n    setGameStarted(true);\r\n    setTotalFlips(0);\r\n\r\n    const interval = setInterval(() => {\r\n      setTotalTime((prevTime) => prevTime + 1);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  };\r\n\r\n  const flipCard = (index) => {\r\n    setFlippedCards((prevFlipped) => prevFlipped + 1);\r\n    setTotalFlips((prevFlips) => prevFlips + 1);\r\n\r\n    if (!gameStarted) {\r\n      startGame();\r\n    }\r\n\r\n    if (flippedCards <= 1) {\r\n      const updatedCards = [...cards];\r\n      updatedCards[index].flipped = true;\r\n      setCards(updatedCards);\r\n    }\r\n\r\n    if (flippedCards === 1) {\r\n      const flippedIndexes = cards.reduce(\r\n        (acc, card, i) => (card.flipped ? [...acc, i] : acc),\r\n        []\r\n      );\r\n\r\n      if (cards[flippedIndexes[0]].emoji === cards[flippedIndexes[1]].emoji) {\r\n        const updatedCards = [...cards];\r\n        updatedCards[flippedIndexes[0]].matched = true;\r\n        updatedCards[flippedIndexes[1]].matched = true;\r\n        setCards(updatedCards);\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setFlippedCards(0);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const renderCard = (card, index) => (\r\n    <div\r\n      key={index}\r\n      className={`card ${card.flipped ? 'flipped' : ''} ${\r\n        card.matched ? 'matched' : ''\r\n      }`}\r\n      onClick={() => flipCard(index)}\r\n    >\r\n      <div className=\"card-front\"></div>\r\n      <div className=\"card-back\">{card.flipped ? card.emoji : ''}</div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"controls\">\r\n        <button onClick={startGame} disabled={gameStarted}>\r\n          Start\r\n        </button>\r\n        <div className=\"stats\">\r\n          <div className=\"moves\">{totalFlips} moves</div>\r\n          <div className=\"timer\">Time: {totalTime} sec</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"board-container\">\r\n        <div className=\"board\" style={{ gridTemplateColumns: `repeat(${boardDimensions}, auto)` }}>\r\n          {cards.map((card, index) => renderCard(card, index))}\r\n        </div>\r\n        {cards.every((card) => card.matched) && (\r\n          <div className=\"win\">\r\n            <span className=\"win-text\">\r\n              You won!<br />\r\n              with <span className=\"highlight\">{totalFlips}</span> moves<br />\r\n              under <span className=\"highlight\">{totalTime}</span> seconds\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MindGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}