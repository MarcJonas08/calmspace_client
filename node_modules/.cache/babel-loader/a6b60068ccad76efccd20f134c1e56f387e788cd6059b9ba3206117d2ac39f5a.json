{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\clinic.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeSlots = () => {\n  _s();\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [username, setUsername] = useState('current_user'); // Replace 'current_user' with the actual username\n\n  useEffect(() => {\n    // Fetch time slots from Django API\n    fetch('http://localhost:8000/api/timeslots/').then(response => response.json()).then(data => setTimeSlots(data));\n\n    // Establish WebSocket connection\n    const newSocket = new WebSocket('ws://localhost:8000/ws/timeslot/');\n    setSocket(newSocket);\n\n    // Cleanup WebSocket connection on component unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  useEffect(() => {\n    // Listen for WebSocket updates\n    if (socket) {\n      socket.onmessage = event => {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket message:', data.message);\n\n        // Refresh time slots after a real-time update\n        fetch('http://localhost:8000/api/timeslots/').then(response => response.json()).then(data => setTimeSlots(data));\n      };\n    }\n  }, [socket]);\n  const handleButtonClick = async timeSlotId => {\n    // Send a request to update the time slot on the server\n    await fetch(`http://localhost:8000/api/timeslots/${timeSlotId}/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: username\n      })\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick(slot.id),\n      disabled: slot.user !== null,\n      style: {\n        backgroundColor: slot.user !== null ? 'red' : 'green'\n      },\n      children: [slot.date, \" - \", slot.branch]\n    }, slot.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeSlots, \"KaCALeFpuNdshqexWobsLWEUxZg=\");\n_c = TimeSlots;\nexport default TimeSlots;\nvar _c;\n$RefreshReg$(_c, \"TimeSlots\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TimeSlots","_s","timeSlots","setTimeSlots","socket","setSocket","username","setUsername","fetch","then","response","json","data","newSocket","WebSocket","close","onmessage","event","JSON","parse","console","log","message","handleButtonClick","timeSlotId","method","headers","body","stringify","user","children","map","slot","onClick","id","disabled","style","backgroundColor","date","branch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/clinic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TimeSlots = () => {\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const [username, setUsername] = useState('current_user'); // Replace 'current_user' with the actual username\r\n\r\n  useEffect(() => {\r\n    // Fetch time slots from Django API\r\n    fetch('http://localhost:8000/api/timeslots/')\r\n      .then((response) => response.json())\r\n      .then((data) => setTimeSlots(data));\r\n\r\n    // Establish WebSocket connection\r\n    const newSocket = new WebSocket('ws://localhost:8000/ws/timeslot/');\r\n    setSocket(newSocket);\r\n\r\n    // Cleanup WebSocket connection on component unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Listen for WebSocket updates\r\n    if (socket) {\r\n      socket.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        console.log('WebSocket message:', data.message);\r\n\r\n        // Refresh time slots after a real-time update\r\n        fetch('http://localhost:8000/api/timeslots/')\r\n          .then((response) => response.json())\r\n          .then((data) => setTimeSlots(data));\r\n      };\r\n    }\r\n  }, [socket]);\r\n\r\n  const handleButtonClick = async (timeSlotId) => {\r\n    // Send a request to update the time slot on the server\r\n    await fetch(`http://localhost:8000/api/timeslots/${timeSlotId}/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ user: username }),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {timeSlots.map((slot) => (\r\n        <button\r\n          key={slot.id}\r\n          onClick={() => handleButtonClick(slot.id)}\r\n          disabled={slot.user !== null}\r\n          style={{ backgroundColor: slot.user !== null ? 'red' : 'green' }}\r\n        >\r\n          {slot.date} - {slot.branch}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeSlots;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;;EAE1DC,SAAS,CAAC,MAAM;IACd;IACAW,KAAK,CAAC,sCAAsC,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKT,YAAY,CAACS,IAAI,CAAC,CAAC;;IAErC;IACA,MAAMC,SAAS,GAAG,IAAIC,SAAS,CAAC,kCAAkC,CAAC;IACnET,SAAS,CAACQ,SAAS,CAAC;;IAEpB;IACA,OAAO,MAAM;MACXA,SAAS,CAACE,KAAK,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENlB,SAAS,CAAC,MAAM;IACd;IACA,IAAIO,MAAM,EAAE;MACVA,MAAM,CAACY,SAAS,GAAIC,KAAK,IAAK;QAC5B,MAAML,IAAI,GAAGM,IAAI,CAACC,KAAK,CAACF,KAAK,CAACL,IAAI,CAAC;QACnCQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAET,IAAI,CAACU,OAAO,CAAC;;QAE/C;QACAd,KAAK,CAAC,sCAAsC,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKT,YAAY,CAACS,IAAI,CAAC,CAAC;MACvC,CAAC;IACH;EACF,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,MAAMmB,iBAAiB,GAAG,MAAOC,UAAU,IAAK;IAC9C;IACA,MAAMhB,KAAK,CAAE,uCAAsCgB,UAAW,GAAE,EAAE;MAChEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAET,IAAI,CAACU,SAAS,CAAC;QAAEC,IAAI,EAAEvB;MAAS,CAAC;IACzC,CAAC,CAAC;EACJ,CAAC;EAED,oBACEP,OAAA;IAAA+B,QAAA,EACG5B,SAAS,CAAC6B,GAAG,CAAEC,IAAI,iBAClBjC,OAAA;MAEEkC,OAAO,EAAEA,CAAA,KAAMV,iBAAiB,CAACS,IAAI,CAACE,EAAE,CAAE;MAC1CC,QAAQ,EAAEH,IAAI,CAACH,IAAI,KAAK,IAAK;MAC7BO,KAAK,EAAE;QAAEC,eAAe,EAAEL,IAAI,CAACH,IAAI,KAAK,IAAI,GAAG,KAAK,GAAG;MAAQ,CAAE;MAAAC,QAAA,GAEhEE,IAAI,CAACM,IAAI,EAAC,KAAG,EAACN,IAAI,CAACO,MAAM;IAAA,GALrBP,IAAI,CAACE,EAAE;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMN,CACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1C,EAAA,CA7DID,SAAS;AAAA4C,EAAA,GAAT5C,SAAS;AA+Df,eAAeA,SAAS;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}