{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, {\n  x: moveX,\n  y: moveY\n}) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that the cell is real\n      if (player.tetromino[y][x] !== 0) {\n        if (\n        // 2. Check that our move is inside the game area's height (y)\n        // Don't allow player to go through the floor\n        !stage[y + player.pos.y + moveY] ||\n        // 3. Check that our move is inside the game area's width (x)\n        !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n        // 4. Check that the cell we're moving to isn't set to clear\n        stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear') {\n          return true;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length","pos"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/gameHelpers.js"],"sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () => \n    Array.from(Array(STAGE_HEIGHT), () =>    \n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            // 1. Check that the cell is real\n            if (player.tetromino[y][x] !== 0) {\n                if(\n                    // 2. Check that our move is inside the game area's height (y)\n                    // Don't allow player to go through the floor\n                    !stage[y + player.pos.y + moveY] || \n                    // 3. Check that our move is inside the game area's width (x)\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                    // 4. Check that the cell we're moving to isn't set to clear\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ) {\n                    return true;\n                }    \n            }\n        }\n    }\n}"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAAE;AAC7B,OAAO,MAAMC,YAAY,GAAG,EAAE;AAE9B,OAAO,MAAMC,WAAW,GAAGA,CAAA,KACvBC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACF,YAAY,CAAC,EAAE,MAC5B,IAAIE,KAAK,CAACH,WAAW,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAC5C,CAAC;AAEL,OAAO,MAAMC,cAAc,GAAGA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAEC,CAAC,EAAEC,KAAK;EAAEC,CAAC,EAAEC;AAAM,CAAC,KAAK;EACrE,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACM,SAAS,CAACC,MAAM,EAAEH,CAAC,IAAI,CAAC,EAAE;IACjD,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACM,SAAS,CAACF,CAAC,CAAC,CAACG,MAAM,EAAEL,CAAC,IAAI,CAAC,EAAE;MACpD;MACA,IAAIF,MAAM,CAACM,SAAS,CAACF,CAAC,CAAC,CAACF,CAAC,CAAC,KAAK,CAAC,EAAE;QAC9B;QACI;QACA;QACA,CAACD,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAG,CAACJ,CAAC,GAAGC,KAAK,CAAC;QAChC;QACA,CAACJ,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAG,CAACJ,CAAC,GAAGC,KAAK,CAAC,CAACH,CAAC,GAAGF,MAAM,CAACQ,GAAG,CAACN,CAAC,GAAGC,KAAK,CAAC;QAC1D;QACAF,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAG,CAACJ,CAAC,GAAGC,KAAK,CAAC,CAACH,CAAC,GAAGF,MAAM,CAACQ,GAAG,CAACN,CAAC,GAAGC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,EAC1E;UACE,OAAO,IAAI;QACf;MACJ;IACJ;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}