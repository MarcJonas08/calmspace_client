{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\tetris.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tetris.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = [\"white\", \"yellow\", \"cyan\", \"orange\", \"blue\", \"magenta\", \"green\", \"red\"];\nconst tetromino = [{\n  blocks: [],\n  pivot: [],\n  value: 0\n}, {\n  blocks: [[0, 4], [0, 5], [1, 4], [1, 5]],\n  //O\n  pivot: [0.5, -0.5],\n  value: 1\n}, {\n  blocks: [[0, 3], [0, 4], [0, 5], [0, 6]],\n  //I\n  pivot: [0.5, 0.5],\n  value: 2\n}, {\n  blocks: [[0, 4], [1, 4], [2, 4], [2, 5]],\n  //L>\n  pivot: [0, 0],\n  value: 3\n}, {\n  blocks: [[0, 5], [1, 5], [2, 5], [2, 4]],\n  //L<\n  pivot: [0, 0],\n  value: 4\n}, {\n  blocks: [[0, 4], [1, 4], [2, 4], [1, 5]],\n  //T\n  pivot: [0, 0],\n  value: 5\n}, {\n  blocks: [[0, 4], [1, 4], [1, 5], [2, 5]],\n  //Z>\n  pivot: [0, 0],\n  value: 6\n}, {\n  blocks: [[0, 5], [1, 5], [1, 4], [2, 4]],\n  //Z<\n  pivot: [0, 0],\n  value: 7\n}];\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction arrOutOfBounds(arr, i) {\n  return i < 0 || i >= arr.length;\n}\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    style: {\n      background: colors[props.value],\n      borderTop: props.t ? \" solid #eee\" : \"0px solid\",\n      borderBottom: props.b ? \" solid\" : \"0px solid\",\n      borderLeft: props.l ? \" solid #eee\" : \"0px solid\",\n      borderRight: props.r ? \" solid\" : \"0px solid\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nclass Board extends React.Component {\n  renderRow(rows, row, rowIndex) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: row.map((square, index) => /*#__PURE__*/_jsxDEV(Square, {\n        l: index === 0 || row[index] > 0 && row[index - 1] === 0,\n        r: index === 9 || row[index] > 0 && row[index + 1] === 0,\n        t: rowIndex === 0 || row[index] > 0 && rows[rowIndex - 1][index] === 0,\n        b: rowIndex === 15 || row[index] > 0 && rows[rowIndex + 1][index] === 0,\n        value: square\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 37\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.props.rows.map((row, rowIndex) => this.renderRow(this.props.rows, row, rowIndex))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst scorePadding = \"000000000\";\nclass ScoreCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scoreCount: 0\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    if (!this.lerp) this.lerp = setInterval(() => this.lerpScore(), 1000 / 60);\n  }\n  lerpScore() {\n    let score = this.state.scoreCount;\n    score += (this.props.score - score) / 3 + 1;\n    if (score >= this.props.score) {\n      score = this.props.score;\n      clearInterval(this.lerp);\n      this.lerp = null;\n    }\n    this.setState({\n      scoreCount: score\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"score\",\n      children: (scorePadding + this.state.scoreCount.toFixed(0)).slice(-scorePadding.length)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this);\n  }\n}\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      speed: 300,\n      rows: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],\n      tetris: {\n        blocks: [],\n        value: 0\n      }\n    };\n  }\n  clearRow(row) {\n    for (let i = 0; i < row.length; ++i) {\n      row[i] = 0;\n    }\n  }\n  clearBoard() {\n    const rows = this.state.rows;\n    for (let i = 0; i < rows.length; ++i) {\n      this.clearRow(rows[i]);\n    }\n    const tetris = this.state.tetris;\n    tetris.blocks = [];\n    this.setState({\n      rows: rows,\n      tetris: tetris,\n      score: 0\n    });\n  }\n  onLoop() {\n    this.gameLoop = setTimeout(() => this.tick(), this.state.speed);\n  }\n  endLoop() {\n    if (this.gameLoop) {\n      clearTimeout(this.gameLoop);\n      this.gameLoop = null;\n    }\n  }\n  overwriteLoop() {\n    this.endLoop();\n    this.tick();\n  }\n  componentDidMount() {\n    this.clearBoard();\n    this.onLoop();\n  }\n  componentWillUnmount() {\n    this.endLoop();\n  }\n  onNewGame() {\n    this.endLoop();\n    this.clearBoard();\n    this.onLoop();\n  }\n  applyTetris(rows, blocks, value) {\n    for (let i = 0; i < blocks.length; ++i) {\n      if (!arrOutOfBounds(rows, blocks[i][0]) && !arrOutOfBounds(rows[blocks[i][0]], blocks[i][1])) rows[blocks[i][0]][blocks[i][1]] = value;\n    }\n  }\n  isEmpty(rows, x, y) {\n    return rows[x][y] === 0;\n  }\n  isRepeat(blocks, i, x, y) {\n    for (let j = 0; j < blocks.length; ++j) {\n      if (i === j) continue;\n      if (blocks[i][0] + x === blocks[j][0] && blocks[i][1] + y === blocks[j][1]) return true;\n    }\n    return false;\n  }\n  canMove(rows, blocks, x, y) {\n    for (let i = 0; i < blocks.length; ++i) {\n      if (arrOutOfBounds(rows, blocks[i][0] + x)) return 0;else if (arrOutOfBounds(rows[blocks[i][0] + x], blocks[i][1] + y)) return 2;else if (!this.isRepeat(blocks, i, x, y) && !this.isEmpty(rows, blocks[i][0] + x, blocks[i][1] + y)) return y === 0 ? -1 : 2;\n    }\n    return 1;\n  }\n  onMoveTetris(x, y) {\n    const rows = this.state.rows.slice();\n    const tetris = Object.assign({}, this.state.tetris);\n    switch (this.canMove(rows, tetris.blocks, x, y)) {\n      case 2:\n        y = 0;\n      //fallthrough\n      case 1:\n        this.applyTetris(rows, tetris.blocks, 0);\n        this.shiftBlocks(tetris.blocks, x, y);\n        this.applyTetris(rows, tetris.blocks, tetris.value);\n        this.setState({\n          rows: rows,\n          tetris: tetris\n        });\n        return true;\n      default:\n        return false;\n    }\n  }\n  moveTetris(x, y) {\n    if (!this.onMoveTetris(x, y)) {\n      this.checkBoard();\n      this.spawnTetris();\n    }\n  }\n  moveTetrisRecursive(x, y) {\n    while (this.onMoveTetris(x, y)) {}\n  }\n  checkRow(row) {\n    for (let i = 0; i < row.length; ++i) {\n      if (row[i] === 0) return false;\n    }\n    return true;\n  }\n  shiftRows(rows, i) {\n    for (let j = i; j >= 0; --j) {\n      rows[j] = j > 0 ? rows[j - 1].slice() : new Array(10).fill(0);\n    }\n  }\n  checkBoard() {\n    const rows = this.state.rows.slice();\n    let score = this.state.score;\n    for (let i = rows.length - 1; i >= 0; --i) {\n      if (this.checkRow(rows[i])) {\n        score += 1000;\n        this.shiftRows(rows, i);\n        ++i;\n      }\n    }\n    this.setState({\n      score: score,\n      rows: rows\n    });\n  }\n  getRotatedTetrisLeft(px, py, x, y, size) {\n    let tx = x - px;\n    let ty = y - py;\n    return {\n      x: -1 * ty + px,\n      y: 1 * tx + py\n    };\n  }\n  getRotatedTetrisRight(px, py, x, y, size) {\n    let tx = x - px;\n    let ty = y - py;\n    return {\n      x: 1 * ty + px,\n      y: -1 * tx + py\n    };\n  }\n  shiftBlocks(blocks, x, y) {\n    for (let i = 0; i < blocks.length; ++i) {\n      blocks[i][0] += x;\n      blocks[i][1] += y;\n    }\n  }\n  unclipTetris(rows, blocks) {\n    //Unclips the current tetromino\n    for (let i = 0; i < blocks.length; ++i) {\n      while (blocks[i][0] < 0) {\n        //If clipped on top, shift down\n        this.shiftBlocks(blocks, 1, 0);\n      }\n      while (blocks[i][0] >= rows.length) {\n        //If clipped below, shift up\n        this.shiftBlocks(blocks, -1, 0);\n      }\n      while (blocks[i][1] < 0) {\n        //If clipped left, shift right\n        this.shiftBlocks(blocks, 0, 1);\n      }\n      while (blocks[i][1] >= rows[0].length) {\n        //If clipped right, shift left\n        this.shiftBlocks(blocks, 0, -1);\n      }\n      while (!this.isEmpty(rows, blocks[i][0], blocks[i][1])) {\n        //If clipped into other tetrominoes, shift up\n        this.shiftBlocks(blocks, -1, 0);\n      }\n    }\n  }\n  rotateTetris() {\n    const rows = this.state.rows.slice();\n    const tetris = Object.assign({}, this.state.tetris);\n    this.applyTetris(rows, tetris.blocks, 0);\n    let px = tetris.blocks[tetris.blocks.length / 2 - 1][0] + tetris.pivot[0],\n      py = tetris.blocks[tetris.blocks.length / 2 - 1][1] + tetris.pivot[1];\n    for (let i = 0; i < tetris.blocks.length; ++i) {\n      let rotated = this.getRotatedTetrisRight(px, py, tetris.blocks[i][0], tetris.blocks[i][1]);\n      tetris.blocks[i][0] = rotated.x;\n      tetris.blocks[i][1] = rotated.y;\n    }\n    let rotated = this.getRotatedTetrisRight(0, 0, tetris.pivot[0], tetris.pivot[1]);\n    tetris.pivot[0] = rotated.x;\n    tetris.pivot[1] = rotated.y;\n    this.unclipTetris(rows, tetris.blocks);\n    this.applyTetris(rows, tetris.blocks, tetris.value);\n    this.setState({\n      rows: rows,\n      tetris: tetris\n    });\n  }\n  spawnTetris() {\n    const tetris = JSON.parse(JSON.stringify(tetromino))[getRndInteger(1, tetromino.length)];\n    const rows = this.state.rows.slice();\n    if (this.canMove(rows, tetris.blocks, 0, 0) > 0) {\n      this.applyTetris(rows, tetris.blocks, tetris.value);\n      this.setState({\n        rows: rows,\n        tetris: tetris\n      });\n    } else {\n      this.endLoop();\n      //alert(\"lose\");\n    }\n  }\n  tick() {\n    if (this.state.tetris.blocks.length === 0) {\n      this.spawnTetris();\n    } else {\n      this.moveTetris(1, 0);\n    }\n    this.onLoop();\n  }\n  handleKeyPress(event) {\n    //if (!this.gameLoop)\n    //return;\n    switch (event.key) {\n      case 'ArrowLeft':\n        //Left\n        this.moveTetris(0, -1);\n        break;\n      case 'ArrowUp':\n        //Up\n        this.rotateTetris(this.state.tetris);\n        break;\n      case 'ArrowRight':\n        //Right\n        this.moveTetris(0, 1);\n        break;\n      case 'ArrowDown':\n        //Down\n        this.moveTetris(1, 0);\n        break;\n      case ' ':\n        this.moveTetrisRecursive(1, 0);\n        break;\n      case 'r':\n        this.onNewGame();\n        break;\n      case 's':\n        if (this.gameLoop) {\n          this.endLoop();\n        } else {\n          this.onLoop();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  onSpeedChange(event) {\n    this.setState({\n      speed: event.target.value\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        onKeyDown: event => {\n          this.handleKeyPress(event);\n        },\n        children: [/*#__PURE__*/_jsxDEV(ScoreCounter, {\n          score: this.state.score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Board, {\n          rows: this.state.rows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"keycapButton\",\n          onClick: () => this.onNewGame(),\n          children: \"R\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), \"  to Reset\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 21\n        }, this), \"Speed:\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          style: {\n            direction: \"rtl\"\n          },\n          value: this.state.speed,\n          min: \"100\",\n          max: \"500\",\n          onChange: event => {\n            this.onSpeedChange(event);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"names":["React","ReactDOM","jsxDEV","_jsxDEV","colors","tetromino","blocks","pivot","value","getRndInteger","min","max","Math","floor","random","arrOutOfBounds","arr","i","length","Square","props","className","style","background","borderTop","t","borderBottom","b","borderLeft","l","borderRight","r","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","Component","renderRow","rows","row","rowIndex","children","map","square","index","render","scorePadding","ScoreCounter","constructor","state","scoreCount","componentWillReceiveProps","nextProps","lerp","setInterval","lerpScore","score","clearInterval","setState","toFixed","slice","Game","speed","tetris","clearRow","clearBoard","onLoop","gameLoop","setTimeout","tick","endLoop","clearTimeout","overwriteLoop","componentDidMount","componentWillUnmount","onNewGame","applyTetris","isEmpty","x","y","isRepeat","j","canMove","onMoveTetris","Object","assign","shiftBlocks","moveTetris","checkBoard","spawnTetris","moveTetrisRecursive","checkRow","shiftRows","Array","fill","getRotatedTetrisLeft","px","py","size","tx","ty","getRotatedTetrisRight","unclipTetris","rotateTetris","rotated","JSON","parse","stringify","handleKeyPress","event","key","onSpeedChange","target","onKeyDown","onClick","type","direction","onChange","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/tetris.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './tetris.css';\r\n\r\nconst colors = [\"white\", \"yellow\", \"cyan\", \"orange\", \"blue\", \"magenta\", \"green\", \"red\"];\r\nconst tetromino = [\r\n  {\r\n    blocks: [],\r\n    pivot: [],\r\n    value: 0,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [0, 5], [1, 4], [1, 5]], //O\r\n    pivot: [0.5, -0.5],\r\n    value: 1,\r\n  },\r\n  {\r\n    blocks: [[0, 3], [0, 4], [0, 5], [0, 6]], //I\r\n    pivot: [0.5, 0.5],\r\n    value: 2,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [1, 4], [2, 4], [2, 5]], //L>\r\n    pivot: [0, 0],\r\n    value: 3,\r\n  },\r\n  {\r\n    blocks: [[0, 5], [1, 5], [2, 5], [2, 4]], //L<\r\n    pivot: [0, 0],\r\n    value: 4,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [1, 4], [2, 4], [1, 5]], //T\r\n    pivot: [0, 0],\r\n    value: 5,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [1, 4], [1, 5], [2, 5]], //Z>\r\n    pivot: [0, 0],\r\n    value: 6,\r\n  },\r\n  {\r\n    blocks: [[0, 5], [1, 5], [1, 4], [2, 4]], //Z<\r\n    pivot: [0, 0],\r\n    value: 7,\r\n  },\r\n]\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min) ) + min;\r\n}\r\nfunction arrOutOfBounds(arr, i) {\r\n  return i < 0 || i >= arr.length;\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" style={{background: colors[props.value],\r\n      borderTop: props.t ? \" solid #eee\" : \"0px solid\",\r\n      borderBottom: props.b ? \" solid\" : \"0px solid\",\r\n      borderLeft: props.l ? \" solid #eee\" : \"0px solid\",\r\n      borderRight: props.r ? \" solid\" : \"0px solid\",}}></button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderRow(rows, row, rowIndex) {\r\n    return (\r\n      <div className=\"board-row\" key={rowIndex}>\r\n        {row.map((square, index) => <Square l={index === 0 || (row[index] > 0 && row[index - 1] === 0)}\r\n                                            r={index === 9 || (row[index] > 0 && row[index + 1] === 0)}\r\n                                            t={rowIndex === 0 || (row[index] > 0 && rows[rowIndex - 1][index] === 0)}\r\n                                            b={rowIndex === 15 || (row[index] > 0 && rows[rowIndex + 1][index] === 0)}\r\n                                            value={square} key={index}/>)}\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map((row, rowIndex) => this.renderRow(this.props.rows, row, rowIndex))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst scorePadding = \"000000000\";\r\nclass ScoreCounter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      scoreCount: 0,\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (!this.lerp)\r\n      this.lerp = setInterval(() => this.lerpScore(), 1000/60)\r\n  }\r\n  lerpScore() {\r\n    let score = this.state.scoreCount;\r\n\r\n    score += (this.props.score - score) / 3 + 1;\r\n    if (score >= this.props.score) {\r\n      score = this.props.score;\r\n      clearInterval(this.lerp);\r\n      this.lerp = null;\r\n    }\r\n\r\n    this.setState({ scoreCount:score });\r\n  }\r\n  render() {\r\n    return (\r\n        <div className=\"score\">\r\n          {(scorePadding + this.state.scoreCount.toFixed(0)).slice(-scorePadding.length)}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        score: 0,\r\n        speed: 300,\r\n        rows: [\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        ],\r\n        tetris: {\r\n          blocks: [],\r\n          value: 0,\r\n        },\r\n    }\r\n  }\r\n\r\n  clearRow(row) {\r\n    for (let i = 0; i < row.length; ++i) {\r\n      row[i] = 0;\r\n    }\r\n  }\r\n  clearBoard() {\r\n    const rows = this.state.rows;\r\n    for (let i = 0; i < rows.length; ++i) {\r\n      this.clearRow(rows[i]);\r\n    }\r\n    const tetris = this.state.tetris;\r\n    tetris.blocks = [];\r\n    this.setState({ rows: rows, tetris: tetris, score: 0});\r\n  }\r\n\r\n  onLoop() {\r\n    this.gameLoop = setTimeout(() => this.tick(), this.state.speed);\r\n  }\r\n  endLoop() {\r\n    if (this.gameLoop) {\r\n      clearTimeout(this.gameLoop);\r\n      this.gameLoop = null;\r\n    }\r\n  }\r\n  overwriteLoop() {\r\n    this.endLoop();\r\n    this.tick();\r\n  }\r\n  componentDidMount() {\r\n    this.clearBoard();\r\n    this.onLoop();\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.endLoop();\r\n  }\r\n\r\n  onNewGame() {\r\n    this.endLoop();\r\n    this.clearBoard();\r\n    this.onLoop();\r\n  }\r\n\r\n  applyTetris(rows, blocks, value) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      if (!arrOutOfBounds(rows, blocks[i][0]) && !arrOutOfBounds(rows[blocks[i][0]], blocks[i][1]))\r\n              rows[blocks[i][0]][blocks[i][1]] = value;\r\n    }\r\n  }\r\n\r\n  isEmpty(rows, x, y) {\r\n    return rows[x][y] === 0;\r\n  }\r\n  isRepeat(blocks, i, x, y) {\r\n    for (let j = 0; j < blocks.length; ++j) {\r\n      if (i === j)\r\n        continue;\r\n      if (blocks[i][0] + x === blocks[j][0] && blocks[i][1] + y === blocks[j][1])\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n  canMove(rows, blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      if (arrOutOfBounds(rows, blocks[i][0] + x))\r\n        return 0;\r\n      else if (arrOutOfBounds(rows[blocks[i][0] + x], blocks[i][1] + y))\r\n        return 2;\r\n      else if (!this.isRepeat(blocks, i, x, y) && !this.isEmpty(rows, blocks[i][0] + x, blocks[i][1] + y))\r\n        return y === 0 ? -1 : 2;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  onMoveTetris(x, y) {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n    switch (this.canMove(rows, tetris.blocks, x, y)) {\r\n      case 2:\r\n        y = 0; //fallthrough\r\n      case 1:\r\n        this.applyTetris(rows, tetris.blocks, 0);\r\n        this.shiftBlocks(tetris.blocks, x, y);\r\n        this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n        this.setState({\r\n          rows: rows,\r\n          tetris: tetris,\r\n        });\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  moveTetris(x, y) {\r\n    if (!this.onMoveTetris(x, y)) {\r\n      this.checkBoard();\r\n      this.spawnTetris();\r\n    }\r\n  }\r\n  moveTetrisRecursive(x, y) {\r\n    while (this.onMoveTetris(x, y)) {}\r\n  }\r\n\r\n  checkRow(row) {\r\n    for (let i = 0; i < row.length; ++i) {\r\n      if (row[i] === 0)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  shiftRows(rows, i) {\r\n    for (let j = i; j >= 0; --j) {\r\n      rows[j] = j > 0 ? rows[j - 1].slice() : new Array(10).fill(0);\r\n    }\r\n  }\r\n\r\n  checkBoard() {\r\n    const rows = this.state.rows.slice();\r\n    let score = this.state.score;\r\n    for (let i = rows.length - 1; i >= 0; --i) {\r\n      if (this.checkRow(rows[i])) {\r\n        score += 1000;\r\n        this.shiftRows(rows, i);\r\n        ++i;\r\n      }\r\n    }\r\n    this.setState({\r\n      score: score,\r\n      rows: rows,\r\n    });\r\n  }\r\n\r\n  getRotatedTetrisLeft(px, py, x, y, size) {\r\n    let tx = x - px;\r\n    let ty = y - py;\r\n    return {\r\n      x: -1 * ty + px,\r\n      y: 1 * tx + py,\r\n    }\r\n  }\r\n  getRotatedTetrisRight(px, py, x, y, size) {\r\n    let tx = x - px;\r\n    let ty = y - py;\r\n    return {\r\n      x: 1 * ty + px,\r\n      y: -1 * tx + py,\r\n    }\r\n  }\r\n\r\n  shiftBlocks(blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      blocks[i][0] += x;\r\n      blocks[i][1] += y;\r\n    }\r\n  }\r\n  unclipTetris(rows, blocks) { //Unclips the current tetromino\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      while (blocks[i][0] < 0) { //If clipped on top, shift down\r\n        this.shiftBlocks(blocks, 1, 0);\r\n      }\r\n      while (blocks[i][0] >= rows.length) { //If clipped below, shift up\r\n        this.shiftBlocks(blocks, -1, 0);\r\n      }\r\n      while (blocks[i][1] < 0) { //If clipped left, shift right\r\n        this.shiftBlocks(blocks, 0, 1);\r\n      }\r\n      while (blocks[i][1] >= rows[0].length) { //If clipped right, shift left\r\n        this.shiftBlocks(blocks, 0, -1);\r\n      }\r\n      while (!this.isEmpty(rows, blocks[i][0], blocks[i][1])) { //If clipped into other tetrominoes, shift up\r\n        this.shiftBlocks(blocks, -1, 0);\r\n      }\r\n    }\r\n  }\r\n  rotateTetris() {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n\r\n    this.applyTetris(rows, tetris.blocks, 0);\r\n    let px = tetris.blocks[tetris.blocks.length/2 - 1][0] + tetris.pivot[0],\r\n     py = tetris.blocks[tetris.blocks.length/2 - 1][1] + tetris.pivot[1];\r\n    for (let i = 0; i < tetris.blocks.length; ++i) {\r\n      let rotated = this.getRotatedTetrisRight(px, py, tetris.blocks[i][0], tetris.blocks[i][1]);\r\n      tetris.blocks[i][0] = rotated.x;\r\n      tetris.blocks[i][1] = rotated.y;\r\n    }\r\n    let rotated = this.getRotatedTetrisRight(0, 0, tetris.pivot[0], tetris.pivot[1]);\r\n    tetris.pivot[0] = rotated.x;\r\n    tetris.pivot[1] = rotated.y;\r\n\r\n    this.unclipTetris(rows, tetris.blocks);\r\n    this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n    this.setState({\r\n      rows: rows,\r\n      tetris: tetris\r\n    });\r\n  }\r\n\r\n  spawnTetris() {\r\n    const tetris = JSON.parse(JSON.stringify(tetromino))[getRndInteger(1, tetromino.length)];\r\n    const rows = this.state.rows.slice();\r\n    if (this.canMove(rows, tetris.blocks, 0, 0) > 0) {\r\n      this.applyTetris(rows, tetris.blocks, tetris.value);\r\n      this.setState({\r\n        rows: rows,\r\n        tetris: tetris,\r\n      });\r\n    }\r\n    else {\r\n      this.endLoop();\r\n      //alert(\"lose\");\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.tetris.blocks.length === 0) {\r\n      this.spawnTetris();\r\n    }\r\n    else {\r\n      this.moveTetris(1, 0);\r\n    }\r\n\r\n    this.onLoop();\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    //if (!this.gameLoop)\r\n      //return;\r\n    switch (event.key) {\r\n      case 'ArrowLeft': //Left\r\n        this.moveTetris(0, -1);\r\n        break;\r\n      case 'ArrowUp': //Up\r\n        this.rotateTetris(this.state.tetris);\r\n        break;\r\n      case 'ArrowRight': //Right\r\n        this.moveTetris(0, 1);\r\n        break;\r\n      case 'ArrowDown': //Down\r\n        this.moveTetris(1, 0);\r\n        break;\r\n      case ' ':\r\n        this.moveTetrisRecursive(1, 0);\r\n        break;\r\n      case 'r':\r\n        this.onNewGame();\r\n        break;\r\n      case 's':\r\n        if (this.gameLoop) {\r\n          this.endLoop();\r\n        }\r\n        else {\r\n          this.onLoop();\r\n        }\r\n        break;\r\n      default:\r\n         break;\r\n    }\r\n  }\r\n\r\n  onSpeedChange(event) {\r\n    this.setState({\r\n      speed: event.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\" onKeyDown={(event) => {this.handleKeyPress(event)}}>\r\n          <ScoreCounter score={this.state.score}/>\r\n          <Board rows={this.state.rows}/>\r\n          <br/>\r\n          <button className=\"keycapButton\" onClick={() => this.onNewGame()}>R</button>  to Reset\r\n          <br/><br/><br/>Speed:&nbsp;\r\n          <input type=\"range\" style={{direction:\"rtl\"}} value={this.state.speed} min=\"100\" max=\"500\" onChange={(event) => {this.onSpeedChange(event)}}></input>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{}</div>\r\n          <ol>{}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}