{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\regForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\nimport '../css/client.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterForm = () => {\n  _s();\n  let {\n    authTokens,\n    user\n  } = useContext(AuthContext);\n  const [branches, setBranches] = useState([]);\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\n  const handleAppointmentTypeChange = appointmentType => {\n    setSelectedAppointmentType(appointmentType);\n  };\n  const [selectedBranch, setSelectedBranch] = useState(null);\n  useEffect(() => {\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${authTokens.access}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      setBranches(data);\n      // Select the first branch by default\n      if (data.length > 0) {\n        setSelectedBranch(data[0].id);\n      }\n    });\n  }, []);\n  const handleBranchClick = branchId => {\n    setSelectedBranch(branchId);\n    setSelectedDoctor(null);\n  };\n  const [doctors, setDoctors] = useState([]);\n  useEffect(() => {\n    if (selectedBranch) {\n      fetch('http://localhost:8000/api/clinic/doctors', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        // Filter the data based on the selected branch\n        const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\n        setDoctors(filteredData);\n      }).catch(error => console.error('Error fetching doctors:', error));\n    }\n  }, [selectedBranch]);\n  const [appointments, setAppointments] = useState([]);\n  useEffect(() => {\n    // Function to fetch appointments\n    const fetchAppointments = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/clinic/appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setAppointments(data);\n        } else {\n          console.error('Error fetching appointments:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n\n    // Fetch appointments initially\n    fetchAppointments();\n\n    // Set up polling with a 5-second interval\n    const pollingInterval = setInterval(() => {\n      fetchAppointments();\n    }, 5000);\n\n    // Clear the interval when the component unmounts\n    return () => clearInterval(pollingInterval);\n  }, [authTokens.access]);\n  const [advanceAppointments, setAdvanceAppointments] = useState([]);\n  useEffect(() => {\n    const fetchData = () => {\n      fetch('http://localhost:8000/api/clinic/advance-appointments', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        setAdvanceAppointments(data);\n      }).catch(error => console.error('Error fetching appointments:', error));\n    };\n\n    // Fetch data initially\n    fetchData();\n\n    // Set up polling with a 5-second interval\n    const intervalId = setInterval(() => {\n      fetchData();\n    }, 5000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [branches]);\n  const hasExistingScheduleForToday = async () => {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const response = await fetch('http://localhost:8000/api/clinic/clients', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return data.some(client => client.userID === user.user_id && client.appointment_date === today);\n      } else {\n        console.error('Error fetching clients:', response.statusText);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking existing schedule:', error);\n      return false;\n    }\n  };\n\n  // FUNCTIONS FOR ADDING CLIENTS\n\n  const [formData, setFormData] = useState({\n    first_name: '',\n    last_name: '',\n    age: '',\n    gender: 'Male',\n    birthday: '',\n    contact_number: '',\n    emergency_contact_number: '',\n    email: '',\n    doctor: '',\n    appointment_date: '',\n    appointment_time: '',\n    medical_history: '',\n    status: 'active',\n    branch_id: '',\n    userID: null,\n    street_address: '',\n    barangay: '',\n    city_town: '',\n    province: '',\n    postal_code: '',\n    country: ''\n  });\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      branch_id: selectedBranch,\n      userID: user.user_id\n    });\n  }, [selectedBranch]);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const handleClientFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\n    try {\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\n        method: 'PATCH',\n        // Assuming you use a PATCH request to update the time field\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [timeField]: !currentValue\n        }) // Send the updated time field as false\n      });\n      if (response.ok) {\n        // Successfully updated the appointment time field\n        // You may want to refresh the data or handle it in a way that suits your application\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\n        fetch('http://localhost:8000/api/clinic/appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          setAppointments(data);\n        }).catch(error => console.error('Error fetching appointments:', error));\n      } else {\n        // Handle the error if the update request fails\n        console.error('Failed to update appointment time field');\n      }\n    } catch (error) {\n      console.error('Error updating appointment time field:', error);\n    }\n  };\n  const updateAdvanceAppointmentTime = async (appointmentId, timeField, currentValue) => {\n    try {\n      const response = await fetch(`http://localhost:8000/update-advance-appointment/${appointmentId}/`, {\n        method: 'PATCH',\n        // Assuming you use a PATCH request to update the time field\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [timeField]: !currentValue\n        }) // Send the updated time field as false\n      });\n      if (response.ok) {\n        // Successfully updated the appointment time field\n        // You may want to refresh the data or handle it in a way that suits your application\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\n        fetch('http://localhost:8000/api/clinic/advance-appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          // Filter the data based on the 'branch' field\n          const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\n          setAdvanceAppointments(filteredData);\n        }).catch(error => console.error('Error fetching appointments:', error));\n      } else {\n        // Handle the error if the update request fails\n        console.error('Failed to update appointment time field');\n      }\n    } catch (error) {\n      console.error('Error updating appointment time field:', error);\n    }\n  };\n  const [selectedAppointmentDate, setSelectedAppointmentDate] = useState('appointment'); // Default to 'appointment'\n\n  const checkTimeSlotAvailability = async selectedTimeSlot => {\n    try {\n      // Fetch the client database\n      const response = await fetch('http://localhost:8000/api/clinic/clients', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const clients = await response.json();\n\n        // Filter appointments for the selected time slot\n        const appointmentsForSlot = clients.filter(client => client.appointment_time === selectedTimeSlot);\n\n        // Return true if no appointments exist for the selected time slot, otherwise return false\n        return appointmentsForSlot.length === 0;\n      } else {\n        console.error('Error fetching clients:', response.statusText);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking time slot availability:', error);\n      return false;\n    }\n  };\n  const [showCreationConfirmation, setShowCreationConfirmation] = useState(false);\n  const handleClientFormSubmit = e => {\n    e.preventDefault();\n    // Display confirmation dialog\n    setShowCreationConfirmation(true);\n  };\n  const handleConfirm = async () => {\n    const existingScheduleForToday = await hasExistingScheduleForToday();\n    if (existingScheduleForToday) {\n      window.alert('Sorry! You already have a scheduled appointment for today.');\n    } else {\n      const isTimeSlotAvailable = checkTimeSlotAvailability(formData.appointment_time);\n      if (!isTimeSlotAvailable) {\n        window.alert('The selected time slot is not available.');\n      } else {\n        if (selectedAppointmentDate === 'appointment') {\n          try {\n            const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${authTokens.access}`\n              },\n              body: JSON.stringify({\n                first_name: formData.first_name.trim(),\n                last_name: formData.last_name.trim(),\n                age: formData.age.trim(),\n                gender: formData.gender.trim(),\n                birthday: formData.birthday.trim(),\n                contact_number: formData.contact_number.trim(),\n                emergency_contact_number: formData.emergency_contact_number.trim(),\n                email: formData.email.trim(),\n                doctor: formData.doctor,\n                appointment_date: new Date().toISOString().split('T')[0],\n                appointment_time: formData.appointment_time.trim(),\n                medical_history: formData.medical_history.trim(),\n                status: formData.status.trim(),\n                branch: formData.branch_id,\n                userID: formData.userID,\n                street_address: formData.street_address.trim(),\n                barangay: formData.barangay.trim(),\n                city_town: formData.city_town.trim(),\n                province: formData.province.trim(),\n                postal_code: formData.postal_code.trim(),\n                country: formData.country.trim()\n              })\n            });\n            if (response.ok) {\n              const data = await response.json();\n\n              // Reset the form data\n              setFormData({\n                first_name: '',\n                last_name: '',\n                age: '',\n                gender: 'Male',\n                birthday: '',\n                contact_number: '',\n                emergency_contact_number: '',\n                email: '',\n                doctor: '',\n                appointment_date: '',\n                appointment_time: '',\n                medical_history: '',\n                street_address: '',\n                barangay: '',\n                city_town: '',\n                province: '',\n                postal_code: '',\n                country: ''\n              });\n              updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\n\n              // Fetch the updated appointments if needed\n              // (You can replace this with direct state manipulation if necessary)\n              fetch('http://localhost:8000/api/clinic/appointments', {\n                method: 'GET',\n                headers: {\n                  'Authorization': `Bearer ${authTokens.access}`,\n                  'Content-type': 'application/json'\n                }\n              }).then(response => response.json()).then(data => {\n                setAppointments(data);\n              }).catch(error => console.error('Error fetching appointments:', error));\n            } else {\n              // Handle the error if the create request fails\n              console.error('Failed to create client:', response.statusText);\n            }\n          } catch (error) {}\n        } else if (selectedAppointmentDate === 'advance-appointment') {\n          const today = new Date();\n          const tomorrow = new Date(today);\n          tomorrow.setDate(today.getDate() + 1);\n          try {\n            const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${authTokens.access}`\n              },\n              body: JSON.stringify({\n                first_name: formData.first_name.trim(),\n                last_name: formData.last_name.trim(),\n                age: formData.age.trim(),\n                gender: formData.gender.trim(),\n                birthday: formData.birthday.trim(),\n                contact_number: formData.contact_number.trim(),\n                emergency_contact_number: formData.emergency_contact_number.trim(),\n                email: formData.email.trim(),\n                doctor: formData.doctor,\n                appointment_date: tomorrow.toISOString().split('T')[0],\n                appointment_time: formData.appointment_time.trim(),\n                medical_history: formData.medical_history.trim(),\n                status: formData.status.trim(),\n                branch: formData.branch_id,\n                userID: formData.userID,\n                street_address: formData.street_address.trim(),\n                barangay: formData.barangay.trim(),\n                city_town: formData.city_town.trim(),\n                province: formData.province.trim(),\n                postal_code: formData.postal_code.trim(),\n                country: formData.country.trim()\n              })\n            });\n            if (response.ok) {\n              const data = await response.json();\n\n              // Reset the form data\n              setFormData({\n                first_name: '',\n                last_name: '',\n                age: '',\n                gender: 'Male',\n                birthday: '',\n                contact_number: '',\n                emergency_contact_number: '',\n                email: '',\n                doctor: '',\n                appointment_date: '',\n                appointment_time: '',\n                medical_history: '',\n                street_address: '',\n                barangay: '',\n                city_town: '',\n                province: '',\n                postal_code: '',\n                country: ''\n              });\n              updateAdvanceAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\n\n              // Fetch the updated appointments if needed\n              // (You can replace this with direct state manipulation if necessary)\n              fetch('http://localhost:8000/api/clinic/advance-appointments', {\n                method: 'GET',\n                headers: {\n                  'Authorization': `Bearer ${authTokens.access}`,\n                  'Content-type': 'application/json'\n                }\n              }).then(response => response.json()).then(data => {\n                // Filter the data based on the 'branch' field\n                const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\n                setAdvanceAppointments(filteredData);\n              }).catch(error => console.error('Error fetching appointments:', error));\n            } else {\n              // Handle the error if the create request fails\n              console.error('Failed to create client:', response.statusText);\n            }\n          } catch (error) {}\n        }\n      }\n    }\n  };\n  const handleCancel = () => {\n    setShowCreationConfirmation(false); // Hide confirmation dialog if user cancels\n  };\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);\n  const [selectedTimeField, setSelectedTimeField] = useState(null);\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null);\n  const [selectedAdvanceAppointments, setSelectedAdvanceAppointments] = useState([]);\n\n  //appointmentId, timeField, currentValue\n\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      doctor: selectedDoctor ? selectedDoctor.id : '',\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : ''\n    });\n  }, [selectedDoctor, selectedTimeSlot]);\n  console.log(\"NAYAHA: \", formData);\n  useEffect(() => {\n    // Update selectedAppointments when selectedDoctor changes\n    if (selectedDoctor) {\n      const doctorAppointments = appointments.filter(appointment => appointment.doctor === selectedDoctor.id);\n      setSelectedAppointments(doctorAppointments);\n    }\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\n\n  useEffect(() => {\n    // Update selectedAppointments when selectedDoctor changes\n    if (selectedDoctor) {\n      const doctorAppointments = advanceAppointments.filter(appointment => appointment.doctor === selectedDoctor.id);\n      setSelectedAdvanceAppointments(doctorAppointments);\n    }\n  }, [selectedDoctor, doctors, advanceAppointments]); // Watch for changes in selectedDoctor\n\n  const handleDoctorClick = doctor => {\n    setSelectedDoctor(doctor);\n    setSelectedTimeSlot('');\n  };\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\n    setSelectedTimeSlot(timeSlot);\n    setSelectedAppointmentId(appointmentId);\n    setSelectedTimeField(timeField);\n    setSelectedCurrentValue(currentValue);\n  };\n  console.log(selectedAppointmentId, selectedCurrentValue, selectedTimeField);\n  console.log(selectedAppointmentDate);\n  const handleAppointmentToday = () => {\n    setSelectedAppointmentDate('appointment');\n    setSelectedTimeSlot('');\n  };\n  const handleAppointmentTomorrow = () => {\n    setSelectedAppointmentDate('advance-appointment');\n    setSelectedTimeSlot('');\n  };\n  const isPastTimeSlot = timeSlot => {\n    const currentTime = new Date();\n    const timeSlotHour = parseInt(timeSlot.split(':')[0]);\n    const timeSlotMinute = parseInt(timeSlot.split(':')[1]);\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n\n    // Check if current hour is greater than time slot hour\n    if (currentHour > timeSlotHour) {\n      return true;\n    } else if (currentHour === timeSlotHour && currentMinute >= timeSlotMinute + 30) {\n      // If current hour is equal to time slot hour, \n      // check if current minute is 30 minutes or more past time slot minute\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-client\",\n      children: [/*#__PURE__*/_jsxDEV(\"ion-icon\", {\n        name: \"close\",\n        id: \"form-close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 1. Select clinic branch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-doctor-btns\",\n          children: branches.map(branch => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleBranchClick(branch.id),\n            style: {\n              backgroundColor: selectedBranch === branch.id ? '#0b3d72' : '#5d9add'\n            },\n            children: branch.branch_name\n          }, branch.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 2. Select a doctor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-doctor-btns\",\n          children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDoctorClick(doctor),\n            style: {\n              backgroundColor: selectedDoctor === doctor ? '#0b3d72' : '#5d9add'\n            },\n            children: doctor.doctor_name\n          }, doctor.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this), selectedDoctor && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 3. Select date of appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-doctor-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAppointmentToday,\n            style: {\n              backgroundColor: selectedAppointmentDate === 'appointment' ? '#0b3d72' : '#5d9add'\n            },\n            children: \"Regular Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAppointmentTomorrow,\n            style: {\n              backgroundColor: selectedAppointmentDate === 'advance-appointment' ? '#0b3d72' : '#5d9add'\n            },\n            children: \"Advance Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 11\n      }, this), selectedDoctor && selectedAppointmentDate === 'appointment' && selectedAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 4. Select time of appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Today's schedule of Dr./Dra. \", selectedDoctor.doctor_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scheds\",\n          children: [selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('8:00 AM') || appointment.time_8am_9am,\n            style: {\n              backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am),\n            children: \"8:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('9:00 AM') || appointment.time_9am_10am,\n            style: {\n              backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am),\n            children: \"9:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('10:00 AM') || appointment.time_10am_11am,\n            style: {\n              backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am),\n            children: \"10:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('11:00 AM') || appointment.time_11am_12pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm),\n            children: \"11:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('13:00 PM') || appointment.time_1pm_2pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm),\n            children: \"1:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('14:00 PM') || appointment.time_2pm_3pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm),\n            children: \"2:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('15:00 PM') || appointment.time_3pm_4pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm),\n            children: \"3:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('16:00 PM') || appointment.time_4pm_5pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm),\n            children: \"4:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 17\n      }, this), selectedDoctor && selectedAppointmentDate === 'advance-appointment' && selectedAdvanceAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 4. Select time of appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Tomorrow's schedule of Dr./Dra. \", selectedDoctor.doctor_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scheds\",\n          children: [selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_8am_9am,\n            style: {\n              backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am),\n            children: \"8:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_9am_10am,\n            style: {\n              backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am),\n            children: \"9:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_10am_11am,\n            style: {\n              backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am),\n            children: \"10:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_11am_12pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm),\n            children: \"11:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_1pm_2pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm),\n            children: \"1:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_2pm_3pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm),\n            children: \"2:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_3pm_4pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm),\n            children: \"3:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_4pm_5pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm),\n            children: \"4:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleClientFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 4. Fill out these informations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"name\",\n            type: \"text\",\n            name: \"first_name\",\n            value: formData.first_name,\n            onChange: handleClientFormChange,\n            placeholder: \"First name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"name\",\n            type: \"text\",\n            name: \"last_name\",\n            value: formData.last_name,\n            onChange: handleClientFormChange,\n            placeholder: \"Last name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"contacts\",\n            type: \"text\",\n            name: \"contact_number\",\n            value: formData.contact_number,\n            onChange: handleClientFormChange,\n            placeholder: \"Contact number\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"contacts\",\n            type: \"text\",\n            name: \"emergency_contact_number\",\n            value: formData.emergency_contact_number,\n            onChange: handleClientFormChange,\n            placeholder: \"Emergency contact number\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"demographs\",\n            children: [\"Age:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"age\",\n              value: formData.age,\n              onChange: handleClientFormChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"demographs\",\n            children: [\"Gender:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"gender\",\n              value: formData.gender,\n              onChange: handleClientFormChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Male\",\n                children: \"Male\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 789,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Female\",\n                children: \"Female\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Other\",\n                children: \"Other\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 781,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"demographs\",\n            children: [\"Birthday:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"birthday\",\n              value: formData.birthday,\n              onChange: handleClientFormChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 797,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"one-input\",\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"email\",\n            value: formData.email,\n            onChange: handleClientFormChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"one-input\",\n          children: [\"Medical History (Optional):\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"medical_history\",\n            value: formData.medical_history,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"street_address\",\n            value: formData.street_address,\n            onChange: handleClientFormChange,\n            placeholder: \"Street address\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"barangay\",\n            value: formData.barangay,\n            onChange: handleClientFormChange,\n            placeholder: \"Barangay\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"city_town\",\n            value: formData.city_town,\n            onChange: handleClientFormChange,\n            placeholder: \"City/Town\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"province\",\n            value: formData.province,\n            onChange: handleClientFormChange,\n            placeholder: \"Province\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"number\",\n            name: \"postal_code\",\n            value: formData.postal_code,\n            onChange: handleClientFormChange,\n            placeholder: \"Postal Code\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"country\",\n            value: formData.country,\n            onChange: handleClientFormChange,\n            placeholder: \"Country\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"confirmation-btn-yes\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 898,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }, this), showCreationConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-popup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm Submission\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to submit the form?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCancel,\n            className: \"confirmation-btn-no\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 909,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleConfirm,\n            className: \"confirmation-btn-yes\",\n            children: \"Confirm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 904,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 601,\n    columnNumber: 5\n  }, this);\n};\n_s(RegisterForm, \"U2Eq7dvryEmOWkddvxYvOlASHhg=\");\n_c = RegisterForm;\nexport default RegisterForm;\nvar _c;\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","RegisterForm","_s","authTokens","user","branches","setBranches","selectedAppointmentType","setSelectedAppointmentType","handleAppointmentTypeChange","appointmentType","selectedBranch","setSelectedBranch","fetch","method","headers","access","then","res","json","data","length","id","handleBranchClick","branchId","setSelectedDoctor","doctors","setDoctors","response","filteredData","filter","doctor","branch_name","catch","error","console","appointments","setAppointments","fetchAppointments","ok","statusText","pollingInterval","setInterval","clearInterval","advanceAppointments","setAdvanceAppointments","fetchData","intervalId","hasExistingScheduleForToday","today","Date","toISOString","split","some","client","userID","user_id","appointment_date","formData","setFormData","first_name","last_name","age","gender","birthday","contact_number","emergency_contact_number","email","appointment_time","medical_history","status","branch_id","street_address","barangay","city_town","province","postal_code","country","showConfirmation","setShowConfirmation","handleClientFormChange","e","name","value","target","prevData","updateAppointmentTime","appointmentId","timeField","currentValue","body","JSON","stringify","log","updateAdvanceAppointmentTime","appointment","branch","selectedAppointmentDate","setSelectedAppointmentDate","checkTimeSlotAvailability","selectedTimeSlot","clients","appointmentsForSlot","showCreationConfirmation","setShowCreationConfirmation","handleClientFormSubmit","preventDefault","handleConfirm","existingScheduleForToday","window","alert","isTimeSlotAvailable","trim","selectedAppointmentId","selectedTimeField","selectedCurrentValue","tomorrow","setDate","getDate","handleCancel","selectedDoctor","selectedAppointments","setSelectedAppointments","setSelectedTimeSlot","setSelectedAppointmentId","setSelectedTimeField","setSelectedCurrentValue","selectedAdvanceAppointments","setSelectedAdvanceAppointments","doctorAppointments","handleDoctorClick","handleAppointmentTime","timeSlot","handleAppointmentToday","handleAppointmentTomorrow","isPastTimeSlot","currentTime","timeSlotHour","parseInt","timeSlotMinute","currentHour","getHours","currentMinute","getMinutes","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","style","backgroundColor","doctor_name","disabled","time_8am_9am","time_9am_10am","time_10am_11am","time_11am_12pm","time_1pm_2pm","time_2pm_3pm","time_3pm_4pm","time_4pm_5pm","onSubmit","type","onChange","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/regForm.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport AuthContext from '../context/AuthContext'\r\nimport '../css/client.css';\r\n\r\nconst RegisterForm = () => {\r\n\r\n  let {authTokens, user} = useContext(AuthContext);\r\n\r\n\r\n  const [branches, setBranches] = useState([]);\r\n\r\n\r\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\r\n\r\n  const handleAppointmentTypeChange = (appointmentType) => {\r\n    setSelectedAppointmentType(appointmentType);\r\n  };\r\n\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${authTokens.access}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setBranches(data);\r\n        // Select the first branch by default\r\n        if (data.length > 0) {\r\n          setSelectedBranch(data[0].id);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const handleBranchClick = (branchId) => {\r\n    setSelectedBranch(branchId);\r\n    setSelectedDoctor(null)\r\n  };\r\n\r\n    const [doctors, setDoctors] = useState([]);\r\n\r\n    useEffect(() => {\r\n      if (selectedBranch) {\r\n        fetch('http://localhost:8000/api/clinic/doctors', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n          }\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            // Filter the data based on the selected branch\r\n            const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\r\n            setDoctors(filteredData);\r\n          })\r\n          .catch(error => console.error('Error fetching doctors:', error));\r\n      }\r\n    }, [selectedBranch]);\r\n\r\n\r\n    const [appointments, setAppointments] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Function to fetch appointments\r\n        const fetchAppointments = async () => {\r\n          try {\r\n            const response = await fetch('http://localhost:8000/api/clinic/appointments', {\r\n              method: 'GET',\r\n              headers: {\r\n                'Authorization': `Bearer ${authTokens.access}`,\r\n                'Content-type': 'application/json',\r\n              }\r\n            });\r\n    \r\n            if (response.ok) {\r\n              const data = await response.json();\r\n              setAppointments(data);\r\n            } else {\r\n              console.error('Error fetching appointments:', response.statusText);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching appointments:', error);\r\n          }\r\n        };\r\n    \r\n        // Fetch appointments initially\r\n        fetchAppointments();\r\n    \r\n        // Set up polling with a 5-second interval\r\n        const pollingInterval = setInterval(() => {\r\n          fetchAppointments();\r\n        }, 5000);\r\n    \r\n        // Clear the interval when the component unmounts\r\n        return () => clearInterval(pollingInterval);\r\n    \r\n      }, [authTokens.access]);\r\n\r\n      const [advanceAppointments, setAdvanceAppointments] = useState([]);\r\n\r\n      useEffect(() => {\r\n        const fetchData = () => {\r\n          fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${authTokens.access}`,\r\n              'Content-type': 'application/json'\r\n            }\r\n          })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              setAdvanceAppointments(data);\r\n            })\r\n            .catch(error => console.error('Error fetching appointments:', error));\r\n        };\r\n    \r\n        // Fetch data initially\r\n        fetchData();\r\n    \r\n        // Set up polling with a 5-second interval\r\n        const intervalId = setInterval(() => {\r\n          fetchData();\r\n        }, 5000);\r\n    \r\n        // Cleanup interval on component unmount\r\n        return () => clearInterval(intervalId);\r\n      }, [branches]);\r\n    \r\n\r\n    const hasExistingScheduleForToday = async () => {\r\n        try {\r\n          const today = new Date().toISOString().split('T')[0];\r\n          const response = await fetch('http://localhost:8000/api/clinic/clients', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${authTokens.access}`,\r\n              'Content-type': 'application/json',\r\n            }\r\n          });\r\n    \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            return data.some(\r\n              (client) =>\r\n                client.userID === user.user_id &&\r\n                client.appointment_date === today\r\n            );\r\n          } else {\r\n            console.error('Error fetching clients:', response.statusText);\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error checking existing schedule:', error);\r\n          return false;\r\n        }\r\n      };\r\n\r\n  // FUNCTIONS FOR ADDING CLIENTS\r\n\r\n  const [formData, setFormData] = useState({\r\n    first_name: '',\r\n    last_name: '',\r\n    age: '',\r\n    gender: 'Male',\r\n    birthday: '',\r\n    contact_number: '',\r\n    emergency_contact_number: '',\r\n    email: '',\r\n    doctor: '',\r\n    appointment_date: '',\r\n    appointment_time: '',\r\n    medical_history: '',\r\n    status: 'active',\r\n    branch_id: '', \r\n    userID: null, \r\n    street_address: '',\r\n    barangay: '',\r\n    city_town: '',\r\n    province: '',\r\n    postal_code: '',\r\n    country: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      branch_id: selectedBranch,\r\n      userID: user.user_id\r\n    })\r\n  }, [selectedBranch])\r\n\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n  const handleClientFormChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\r\n        method: 'PATCH', // Assuming you use a PATCH request to update the time field\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ [timeField]: !currentValue }), // Send the updated time field as false\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the appointment time field\r\n        // You may want to refresh the data or handle it in a way that suits your application\r\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\r\n        fetch('http://localhost:8000/api/clinic/appointments', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n        }\r\n\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            setAppointments(data)\r\n          })\r\n          .catch(error => console.error('Error fetching appointments:', error));\r\n\r\n      } else {\r\n        // Handle the error if the update request fails\r\n        console.error('Failed to update appointment time field');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating appointment time field:', error);\r\n    }\r\n  };\r\n  const updateAdvanceAppointmentTime = async (appointmentId, timeField, currentValue) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/update-advance-appointment/${appointmentId}/`, {\r\n        method: 'PATCH', // Assuming you use a PATCH request to update the time field\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ [timeField]: !currentValue }), // Send the updated time field as false\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the appointment time field\r\n        // You may want to refresh the data or handle it in a way that suits your application\r\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\r\n        fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n        }\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            // Filter the data based on the 'branch' field\r\n            const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\r\n            setAdvanceAppointments(filteredData)\r\n          })\r\n          .catch(error => console.error('Error fetching appointments:', error));\r\n\r\n      } else {\r\n        // Handle the error if the update request fails\r\n        console.error('Failed to update appointment time field');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating appointment time field:', error);\r\n    }\r\n  };\r\n\r\n  const [selectedAppointmentDate, setSelectedAppointmentDate] = useState('appointment'); // Default to 'appointment'\r\n\r\n  const checkTimeSlotAvailability = async (selectedTimeSlot) => {\r\n    try {\r\n      // Fetch the client database\r\n      const response = await fetch('http://localhost:8000/api/clinic/clients', {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-type': 'application/json',\r\n        },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const clients = await response.json();\r\n        \r\n        // Filter appointments for the selected time slot\r\n        const appointmentsForSlot = clients.filter(client => client.appointment_time === selectedTimeSlot);\r\n        \r\n        // Return true if no appointments exist for the selected time slot, otherwise return false\r\n        return appointmentsForSlot.length === 0;\r\n      } else {\r\n        console.error('Error fetching clients:', response.statusText);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking time slot availability:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const [showCreationConfirmation, setShowCreationConfirmation] = useState(false);\r\n\r\n  const handleClientFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Display confirmation dialog\r\n    setShowCreationConfirmation(true);\r\n  };\r\n\r\n  const handleConfirm = async () => {\r\n\r\n      const existingScheduleForToday = await hasExistingScheduleForToday();\r\n\r\n      if (existingScheduleForToday){\r\n        window.alert('Sorry! You already have a scheduled appointment for today.')\r\n      } else{\r\n\r\n        const isTimeSlotAvailable = checkTimeSlotAvailability(formData.appointment_time);\r\n\r\n        if (!isTimeSlotAvailable) {\r\n          window.alert('The selected time slot is not available.');\r\n        } else {\r\n          if (selectedAppointmentDate === 'appointment'){\r\n            try{\r\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${authTokens.access}`,\r\n                },\r\n                body: JSON.stringify({\r\n                  first_name: formData.first_name.trim(),\r\n                  last_name: formData.last_name.trim(),\r\n                  age: formData.age.trim(),\r\n                  gender: formData.gender.trim(),\r\n                  birthday: formData.birthday.trim(),\r\n                  contact_number: formData.contact_number.trim(),\r\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\r\n                  email: formData.email.trim(),\r\n                  doctor: formData.doctor,\r\n                  appointment_date: new Date().toISOString().split('T')[0],\r\n                  appointment_time: formData.appointment_time.trim(),\r\n                  medical_history: formData.medical_history.trim(),\r\n                  status: formData.status.trim(),\r\n                  branch: formData.branch_id,\r\n                  userID: formData.userID,\r\n                  street_address: formData.street_address.trim(),\r\n                  barangay: formData.barangay.trim(),\r\n                  city_town: formData.city_town.trim(),\r\n                  province: formData.province.trim(),\r\n                  postal_code: formData.postal_code.trim(),\r\n                  country: formData.country.trim(),\r\n                }),\r\n              })\r\n      \r\n                if (response.ok) {\r\n                  const data = await response.json();\r\n      \r\n                  // Reset the form data\r\n                  setFormData({\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    age: '',\r\n                    gender: 'Male',\r\n                    birthday: '',\r\n                    contact_number: '',\r\n                    emergency_contact_number: '',\r\n                    email: '',\r\n                    doctor: '',\r\n                    appointment_date: '',\r\n                    appointment_time: '',\r\n                    medical_history: '',\r\n                    street_address: '',\r\n                    barangay: '',\r\n                    city_town: '',\r\n                    province: '',\r\n                    postal_code: '',\r\n                    country: '',\r\n                  });\r\n      \r\n                  updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\r\n          \r\n                  // Fetch the updated appointments if needed\r\n                  // (You can replace this with direct state manipulation if necessary)\r\n                  fetch('http://localhost:8000/api/clinic/appointments', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Authorization': `Bearer ${authTokens.access}`,\r\n                      'Content-type': 'application/json',\r\n                    },\r\n                  })\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                    setAppointments(data);\r\n                  })\r\n                  .catch(error => console.error('Error fetching appointments:', error));\r\n                } else {\r\n                  // Handle the error if the create request fails\r\n                  console.error('Failed to create client:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n  \r\n            }\r\n          } else if (selectedAppointmentDate === 'advance-appointment'){\r\n            const today = new Date();\r\n            const tomorrow = new Date(today);\r\n            tomorrow.setDate(today.getDate() + 1);\r\n  \r\n            try{\r\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${authTokens.access}`,\r\n                },\r\n                body: JSON.stringify({\r\n                  first_name: formData.first_name.trim(),\r\n                  last_name: formData.last_name.trim(),\r\n                  age: formData.age.trim(),\r\n                  gender: formData.gender.trim(),\r\n                  birthday: formData.birthday.trim(),\r\n                  contact_number: formData.contact_number.trim(),\r\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\r\n                  email: formData.email.trim(),\r\n                  doctor: formData.doctor,\r\n                  appointment_date: tomorrow.toISOString().split('T')[0],\r\n                  appointment_time: formData.appointment_time.trim(),\r\n                  medical_history: formData.medical_history.trim(),\r\n                  status: formData.status.trim(),\r\n                  branch: formData.branch_id,\r\n                  userID: formData.userID,\r\n                  street_address: formData.street_address.trim(),\r\n                  barangay: formData.barangay.trim(),\r\n                  city_town: formData.city_town.trim(),\r\n                  province: formData.province.trim(),\r\n                  postal_code: formData.postal_code.trim(),\r\n                  country: formData.country.trim(),\r\n                }),\r\n              })\r\n      \r\n                if (response.ok) {\r\n                  const data = await response.json();\r\n      \r\n                  // Reset the form data\r\n                  setFormData({\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    age: '',\r\n                    gender: 'Male',\r\n                    birthday: '',\r\n                    contact_number: '',\r\n                    emergency_contact_number: '',\r\n                    email: '',\r\n                    doctor: '',\r\n                    appointment_date: '',\r\n                    appointment_time: '',\r\n                    medical_history: '',\r\n                    street_address: '',\r\n                    barangay: '',\r\n                    city_town: '',\r\n                    province: '',\r\n                    postal_code: '',\r\n                    country: '',\r\n                  });\r\n      \r\n                  updateAdvanceAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\r\n          \r\n                  // Fetch the updated appointments if needed\r\n                  // (You can replace this with direct state manipulation if necessary)\r\n                  fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Authorization': `Bearer ${authTokens.access}`,\r\n                      'Content-type': 'application/json',\r\n                    },\r\n                  })\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                    // Filter the data based on the 'branch' field\r\n                    const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\r\n                    setAdvanceAppointments(filteredData);\r\n                  })\r\n                  .catch(error => console.error('Error fetching appointments:', error));\r\n                } else {\r\n                  // Handle the error if the create request fails\r\n                  console.error('Failed to create client:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n              \r\n            }\r\n          }\r\n  \r\n        }\r\n      }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShowCreationConfirmation(false); // Hide confirmation dialog if user cancels\r\n  };\r\n\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null)\r\n  const [selectedTimeField, setSelectedTimeField] = useState(null)\r\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null)\r\n\r\n  const [selectedAdvanceAppointments, setSelectedAdvanceAppointments] = useState([]);\r\n\r\n  //appointmentId, timeField, currentValue\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      doctor: selectedDoctor ? selectedDoctor.id : '',\r\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : '',\r\n    })\r\n  }, [selectedDoctor, selectedTimeSlot])\r\n\r\n  console.log(\"NAYAHA: \", formData)\r\n\r\n  useEffect(() => {\r\n    // Update selectedAppointments when selectedDoctor changes\r\n    if (selectedDoctor) {\r\n      const doctorAppointments = appointments.filter(\r\n        (appointment) => appointment.doctor === selectedDoctor.id\r\n      );\r\n      setSelectedAppointments(doctorAppointments);\r\n    }\r\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\r\n\r\n  useEffect(() => {\r\n    // Update selectedAppointments when selectedDoctor changes\r\n    if (selectedDoctor) {\r\n      const doctorAppointments = advanceAppointments.filter(\r\n        (appointment) => appointment.doctor === selectedDoctor.id\r\n      );\r\n      setSelectedAdvanceAppointments(doctorAppointments);\r\n    }\r\n  }, [selectedDoctor, doctors, advanceAppointments]); // Watch for changes in selectedDoctor\r\n\r\n  const handleDoctorClick = (doctor) => {\r\n    setSelectedDoctor(doctor);\r\n    setSelectedTimeSlot('');\r\n  };\r\n\r\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\r\n    setSelectedTimeSlot(timeSlot);\r\n    setSelectedAppointmentId(appointmentId);\r\n    setSelectedTimeField(timeField);\r\n    setSelectedCurrentValue(currentValue);\r\n  }\r\n\r\n  console.log(selectedAppointmentId, selectedCurrentValue, selectedTimeField)\r\n\r\n  console.log(selectedAppointmentDate)\r\n\r\n  const handleAppointmentToday = () => {\r\n    setSelectedAppointmentDate('appointment')\r\n    setSelectedTimeSlot('');\r\n  }\r\n\r\n  const handleAppointmentTomorrow = () => {\r\n    setSelectedAppointmentDate('advance-appointment')\r\n    setSelectedTimeSlot('');\r\n  }\r\n\r\n  const isPastTimeSlot = (timeSlot) => {\r\n    const currentTime = new Date();\r\n    const timeSlotHour = parseInt(timeSlot.split(':')[0]);\r\n    const timeSlotMinute = parseInt(timeSlot.split(':')[1]);\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n    \r\n    // Check if current hour is greater than time slot hour\r\n    if (currentHour > timeSlotHour) {\r\n        return true;\r\n    } else if (currentHour === timeSlotHour && currentMinute >= timeSlotMinute + 30) {\r\n        // If current hour is equal to time slot hour, \r\n        // check if current minute is 30 minutes or more past time slot minute\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='create-client'>\r\n\r\n        <ion-icon name=\"close\" id='form-close'></ion-icon>\r\n\r\n        <div className='select-doctor'>\r\n          <p>Step 1. Select clinic branch</p>\r\n          <div className='select-doctor-btns'>\r\n            {branches.map((branch) => (\r\n              <button \r\n                key={branch.id}\r\n                onClick={() => handleBranchClick(branch.id)}\r\n                style={{ backgroundColor: selectedBranch === branch.id ? '#0b3d72' : '#5d9add' }}\r\n              >\r\n                {branch.branch_name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className='select-doctor'>\r\n          <p>Step 2. Select a doctor</p>\r\n          <div className='select-doctor-btns'>\r\n            {doctors.map((doctor) => (\r\n            <button key={doctor.id} onClick={() => handleDoctorClick(doctor)}\r\n            style={{backgroundColor: selectedDoctor === doctor ? '#0b3d72' : '#5d9add'}}>\r\n                {doctor.doctor_name}\r\n            </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {selectedDoctor && (\r\n          <div className='select-doctor'>\r\n            <p>Step 3. Select date of appointment</p>\r\n            <div className='select-doctor-btns'>\r\n              <button\r\n                onClick={handleAppointmentToday}\r\n                style={{ backgroundColor: selectedAppointmentDate === 'appointment' ? '#0b3d72' : '#5d9add' }}\r\n              >\r\n                Regular Appointment\r\n              </button>\r\n              <button\r\n                onClick={handleAppointmentTomorrow}\r\n                style={{ backgroundColor: selectedAppointmentDate === 'advance-appointment' ? '#0b3d72' : '#5d9add' }}\r\n              >\r\n                Advance Appointment\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {selectedDoctor && selectedAppointmentDate === 'appointment' && selectedAppointments.length > 0 && (\r\n                <div className='appointment'>\r\n                <p>Step 4. Select time of appointment</p>\r\n                <h3>Today's schedule of Dr./Dra. {selectedDoctor.doctor_name}</h3>\r\n                <div className='scheds'>\r\n                {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('8:00 AM') || appointment.time_8am_9am} style={{backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am)}>8:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('9:00 AM') || appointment.time_9am_10am} style={{backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am)}>9:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('10:00 AM') || appointment.time_10am_11am} style={{backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am)}>10:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('11:00 AM') || appointment.time_11am_12pm} style={{backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm)}>11:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('13:00 PM') || appointment.time_1pm_2pm} style={{backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm)}>1:00 PM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('14:00 PM') || appointment.time_2pm_3pm} style={{backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm)}>2:00 PM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('15:00 PM') || appointment.time_3pm_4pm} style={{backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm)}>3:00 PM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('16:00 PM') || appointment.time_4pm_5pm} style={{backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm)}>4:00 PM</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n              {selectedDoctor && selectedAppointmentDate === 'advance-appointment' && selectedAdvanceAppointments.length > 0 && (\r\n                <div className='appointment'>\r\n                <p>Step 4. Select time of appointment</p>\r\n                <h3>Tomorrow's schedule of Dr./Dra. {selectedDoctor.doctor_name}</h3>\r\n                <div className='scheds'>\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_8am_9am} style={{backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am)}>8:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_9am_10am} style={{backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am)}>9:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_10am_11am} style={{backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am)}>10:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_11am_12pm} style={{backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm)}>11:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_1pm_2pm} style={{backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm)}>1:00 PM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_2pm_3pm} style={{backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm)}>2:00 PM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_3pm_4pm} style={{backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm)}>3:00 PM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_4pm_5pm} style={{backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm)}>4:00 PM</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n          <form onSubmit={handleClientFormSubmit}>\r\n            <p>Step 4. Fill out these informations</p>\r\n            <div className='multi-inputs'>\r\n\r\n                <input\r\n                  className='name'\r\n                  type=\"text\"\r\n                  name=\"first_name\"\r\n                  value={formData.first_name}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='First name'\r\n                  required\r\n                />\r\n\r\n                <input\r\n                  className='name'\r\n                  type=\"text\"\r\n                  name=\"last_name\"\r\n                  value={formData.last_name}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='Last name'\r\n                  required\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n\r\n                <input\r\n                  className='contacts'\r\n                  type=\"text\"\r\n                  name=\"contact_number\"\r\n                  value={formData.contact_number}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='Contact number'\r\n                  required\r\n                />\r\n\r\n                <input\r\n                  className='contacts'\r\n                  type=\"text\"\r\n                  name=\"emergency_contact_number\"\r\n                  value={formData.emergency_contact_number}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='Emergency contact number'\r\n                  required\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n              <label className='demographs'>\r\n                Age:\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"age\"\r\n                  value={formData.age}\r\n                  onChange={handleClientFormChange}\r\n                  required\r\n                />\r\n              </label>\r\n\r\n              <label className='demographs'>\r\n                Gender:\r\n                <select\r\n                  name=\"gender\"\r\n                  value={formData.gender}\r\n                  onChange={handleClientFormChange}\r\n                  required\r\n                >\r\n                  <option value=\"Male\">Male</option>\r\n                  <option value=\"Female\">Female</option>\r\n                  <option value=\"Other\">Other</option>\r\n                </select>\r\n              </label>\r\n\r\n              <label className='demographs'>\r\n                Birthday:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"birthday\"\r\n                  value={formData.birthday}\r\n                  onChange={handleClientFormChange}\r\n                  required\r\n                />\r\n              </label>\r\n            </div>\r\n            \r\n            <label className='one-input'>\r\n              Email:\r\n              <input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                value={formData.email}\r\n                onChange={handleClientFormChange}\r\n                required\r\n              />\r\n            </label>\r\n\r\n            <label className='one-input'>\r\n              Medical History (Optional):\r\n              <textarea\r\n                name=\"medical_history\"\r\n                value={formData.medical_history}\r\n                onChange={handleClientFormChange}\r\n              />\r\n            </label>\r\n\r\n            <div className='multi-inputs'>\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"street_address\"\r\n                    value={formData.street_address}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Street address'\r\n                    required\r\n                  />\r\n\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"barangay\"\r\n                    value={formData.barangay}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Barangay'\r\n                    required\r\n                  />\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"city_town\"\r\n                    value={formData.city_town}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='City/Town'\r\n                    required\r\n                  />\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"province\"\r\n                    value={formData.province}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Province'\r\n                    required\r\n                  />\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n                  <input\r\n                    className='address'\r\n                    type=\"number\"\r\n                    name=\"postal_code\"\r\n                    value={formData.postal_code}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Postal Code'\r\n                    required\r\n                  />\r\n\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"country\"\r\n                    value={formData.country}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Country'\r\n                    required\r\n                  />\r\n            </div>\r\n\r\n        {/* Add your branch_id and userID input fields here */}\r\n\r\n        <div className='form-actions'>\r\n            <button type=\"submit\" className='confirmation-btn-yes'>Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {showCreationConfirmation && (\r\n        <div className=\"confirmation-popup\">\r\n          <div className=\"confirmation-popup-content\">\r\n            <h2>Confirm Submission</h2>\r\n            <p>Are you sure you want to submit the form?</p>\r\n            <div className=\"confirmation-buttons\">\r\n              <button onClick={handleCancel} className='confirmation-btn-no'>Cancel</button>\r\n              <button onClick={handleConfirm} className='confirmation-btn-yes'>Confirm</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default RegisterForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}