{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\regForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterForm = () => {\n  _s();\n  const [branches, setBranches] = useState([]);\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\n  const handleAppointmentTypeChange = appointmentType => {\n    setSelectedAppointmentType(appointmentType);\n  };\n  const [selectedBranch, setSelectedBranch] = useState(null);\n  useEffect(() => {\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${authTokens.access}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      setBranches(data);\n      // Select the first branch by default\n      if (data.length > 0) {\n        setSelectedBranch(data[0].id);\n      }\n    });\n  }, []);\n  const handleBranchClick = branchId => {\n    setSelectedBranch(branchId);\n    setSelectedDoctor(null);\n  };\n  const [doctors, setDoctors] = useState([]);\n  useEffect(() => {\n    if (selectedBranch) {\n      fetch('http://localhost:8000/api/clinic/doctors', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        // Filter the data based on the selected branch\n        const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\n        setDoctors(filteredData);\n      }).catch(error => console.error('Error fetching doctors:', error));\n    }\n  }, [selectedBranch]);\n  const [appointments, setAppointments] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:8000/api/clinic/appointments', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${authTokens.access}`,\n        'Content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      setAppointments(data);\n    }).catch(error => console.error('Error fetching appointments:', error));\n  }, [branches]);\n\n  // FUNCTIONS FOR ADDING CLIENTS\n\n  const [formData, setFormData] = useState({\n    first_name: '',\n    last_name: '',\n    age: '',\n    birthday: '',\n    contact_number: '',\n    emergency_contact_number: '',\n    email: '',\n    doctor: '',\n    appointment_date: new Date().toISOString().split('T')[0],\n    appointment_time: '',\n    medical_history: '',\n    status: 'active',\n    appointment_type: 'face_to_face',\n    // Default value set to 'face_to_face'\n    branch_id: '',\n    userID: null\n  });\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      branch_id: selectedBranch\n    });\n  }, [selectedBranch]);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const handleClientFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\n    try {\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\n        method: 'PATCH',\n        // Assuming you use a PATCH request to update the time field\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [timeField]: !currentValue\n        }) // Send the updated time field as false\n      });\n      if (response.ok) {\n        // Successfully updated the appointment time field\n        // You may want to refresh the data or handle it in a way that suits your application\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\n        fetch('http://localhost:8000/api/clinic/appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          setAppointments(data);\n        }).catch(error => console.error('Error fetching appointments:', error));\n      } else {\n        // Handle the error if the update request fails\n        console.error('Failed to update appointment time field');\n      }\n    } catch (error) {\n      console.error('Error updating appointment time field:', error);\n    }\n  };\n  const handleClientFormSubmit = async e => {\n    e.preventDefault();\n\n    // Display confirmation dialog\n    const userConfirmed = window.confirm('Do you want to submit the form?');\n    if (userConfirmed) {\n      console.log(formData);\n      setShowConfirmation(true);\n      try {\n        const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${authTokens.access}`\n          },\n          body: JSON.stringify({\n            first_name: formData.first_name.trim(),\n            last_name: formData.last_name.trim(),\n            age: formData.age.trim(),\n            birthday: formData.birthday.trim(),\n            contact_number: formData.contact_number.trim(),\n            emergency_contact_number: formData.emergency_contact_number.trim(),\n            email: formData.email.trim(),\n            doctor: formData.doctor,\n            appointment_date: formData.appointment_date.trim(),\n            appointment_time: formData.appointment_time.trim(),\n            medical_history: formData.medical_history.trim(),\n            status: formData.status.trim(),\n            appointment_type: formData.appointment_type.trim(),\n            branch: formData.branch_id,\n            userID: formData.userID\n          })\n        });\n        if (response.ok) {\n          const data = await response.json();\n\n          // Reset the form data\n          setFormData({\n            first_name: '',\n            last_name: '',\n            age: '',\n            birthday: '',\n            contact_number: '',\n            emergency_contact_number: '',\n            email: '',\n            doctor: '',\n            appointment_date: '',\n            appointment_time: '',\n            medical_history: ''\n          });\n          updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\n\n          // Fetch the updated appointments if needed\n          // (You can replace this with direct state manipulation if necessary)\n          fetch('http://localhost:8000/api/clinic/appointments', {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${authTokens.access}`,\n              'Content-type': 'application/json'\n            }\n          }).then(response => response.json()).then(data => {\n            // Filter the data based on the 'branch' field\n            const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\n            setAppointments(filteredData);\n          }).catch(error => console.error('Error fetching appointments:', error));\n        } else {\n          // Handle the error if the create request fails\n          console.error('Failed to create client:', response.statusText);\n        }\n      } catch (error) {}\n    } else {\n      // Handle cancellation if needed\n    }\n  };\n\n  // console.log('HAHHAAA: ', branchId)\n  console.log('HAHAHAHAHA: ', formData);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);\n  const [selectedTimeField, setSelectedTimeField] = useState(null);\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null);\n\n  //appointmentId, timeField, currentValue\n\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      doctor: selectedDoctor ? selectedDoctor.id : '',\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : ''\n    });\n  }, [selectedDoctor, selectedTimeSlot]);\n  console.log(\"NAYAHA: \", formData);\n  useEffect(() => {\n    // Update selectedAppointments when selectedDoctor changes\n    if (selectedDoctor) {\n      const doctorAppointments = appointments.filter(appointment => appointment.doctor === selectedDoctor.id);\n      setSelectedAppointments(doctorAppointments);\n    }\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\n\n  const handleDoctorClick = doctor => {\n    setSelectedDoctor(doctor);\n  };\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\n    setSelectedTimeSlot(timeSlot);\n    setSelectedAppointmentId(appointmentId);\n    setSelectedTimeField(timeField);\n    setSelectedCurrentValue(currentValue);\n  };\n  console.log(selectedAppointmentId, selectedCurrentValue, selectedTimeField);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-client\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-branch-buttons\",\n        children: branches.map(branch => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleBranchClick(branch.id),\n          style: {\n            backgroundColor: selectedBranch === branch.id ? 'blue' : 'lightcoral'\n          },\n          children: branch.branch_name\n        }, branch.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDoctorClick(doctor),\n          style: {\n            backgroundColor: selectedDoctor === doctor ? 'blue' : 'lightcoral'\n          },\n          children: doctor.doctor_name\n        }, doctor.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), selectedDoctor && selectedAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Appointments for \", selectedDoctor.doctor_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_8am_9am,\n            style: {\n              backgroundColor: appointment.time_8am_9am || selectedTimeSlot === '8am - 9am' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('8am - 9am', appointment.id, 'time_8am_9am', appointment.time_8am_9am),\n            children: \"8am - 9am\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_9am_10am,\n            style: {\n              backgroundColor: appointment.time_9am_10am || selectedTimeSlot === '9am - 10am' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('9am - 10am', appointment.id, 'time_9am_10am', appointment.time_9am_10am),\n            children: \"9am - 10am\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_10am_11am,\n            style: {\n              backgroundColor: appointment.time_10am_11am || selectedTimeSlot === '10am - 11am' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('10am - 11am', appointment.id, 'time_10am_11am', appointment.time_10am_11am),\n            children: \"10am - 11am\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_11am_12pm,\n            style: {\n              backgroundColor: appointment.time_11am_12pm || selectedTimeSlot === '11am - 12pm' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('11am - 12pm', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm),\n            children: \"11am - 12pm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_1pm_2pm,\n            style: {\n              backgroundColor: appointment.time_1pm_2pm || selectedTimeSlot === '1pm - 2pm' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('1pm - 2pm', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm),\n            children: \"1pm - 2pm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_2pm_3pm,\n            style: {\n              backgroundColor: appointment.time_2pm_3pm || selectedTimeSlot === '2pm - 3pm' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('2pm - 3pm', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm),\n            children: \"2pm - 3pm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_3pm_4pm,\n            style: {\n              backgroundColor: appointment.time_3pm_4pm || selectedTimeSlot === '3pm - 4pm' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('3pm - 4pm', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm),\n            children: \"3pm - 4pm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 21\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: appointment.time_4pm_5pm,\n            style: {\n              backgroundColor: appointment.time_4pm_5pm || selectedTimeSlot === '4pm - 5pm' ? 'red' : 'black'\n            },\n            onClick: () => handleAppointmentTime('4pm - 5pm', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm),\n            children: \"4pm - 5pm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleClientFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"First Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"first_name\",\n            value: formData.first_name,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Last Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"last_name\",\n            value: formData.last_name,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Age:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"age\",\n            value: formData.age,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Birthday:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"birthday\",\n            value: formData.birthday,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Contact Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"contact_number\",\n            value: formData.contact_number,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Emergency Contact Number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"emergency_contact_number\",\n            value: formData.emergency_contact_number,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"email\",\n            value: formData.email,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Medical History:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"medical_history\",\n            value: formData.medical_history,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Appointment Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"appointment_type\",\n            value: formData.appointment_type,\n            onChange: handleClientFormChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"online\",\n              children: \"Online\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"face_to_face\",\n              children: \"Face to Face\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(RegisterForm, \"46Dz6DoWmMESZooYZ+JnPTwHEsU=\");\n_c = RegisterForm;\nexport default RegisterForm;\nvar _c;\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["React","useState","useEffect","useContext","jsxDEV","_jsxDEV","RegisterForm","_s","branches","setBranches","selectedAppointmentType","setSelectedAppointmentType","handleAppointmentTypeChange","appointmentType","selectedBranch","setSelectedBranch","fetch","method","headers","authTokens","access","then","res","json","data","length","id","handleBranchClick","branchId","setSelectedDoctor","doctors","setDoctors","response","filteredData","filter","doctor","branch_name","catch","error","console","appointments","setAppointments","formData","setFormData","first_name","last_name","age","birthday","contact_number","emergency_contact_number","email","appointment_date","Date","toISOString","split","appointment_time","medical_history","status","appointment_type","branch_id","userID","showConfirmation","setShowConfirmation","handleClientFormChange","e","name","value","target","prevData","updateAppointmentTime","appointmentId","timeField","currentValue","body","JSON","stringify","ok","log","handleClientFormSubmit","preventDefault","userConfirmed","window","confirm","trim","branch","selectedAppointmentId","selectedTimeField","selectedCurrentValue","appointment","user","statusText","selectedDoctor","selectedAppointments","setSelectedAppointments","selectedTimeSlot","setSelectedTimeSlot","setSelectedAppointmentId","setSelectedTimeField","setSelectedCurrentValue","doctorAppointments","handleDoctorClick","handleAppointmentTime","timeSlot","children","className","map","onClick","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","doctor_name","disabled","time_8am_9am","time_9am_10am","time_10am_11am","time_11am_12pm","time_1pm_2pm","time_2pm_3pm","time_3pm_4pm","time_4pm_5pm","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/regForm.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\n\r\nconst RegisterForm = () => {\r\n\r\n\r\n  const [branches, setBranches] = useState([]);\r\n\r\n\r\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\r\n\r\n  const handleAppointmentTypeChange = (appointmentType) => {\r\n    setSelectedAppointmentType(appointmentType);\r\n  };\r\n\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${authTokens.access}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setBranches(data);\r\n        // Select the first branch by default\r\n        if (data.length > 0) {\r\n          setSelectedBranch(data[0].id);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const handleBranchClick = (branchId) => {\r\n    setSelectedBranch(branchId);\r\n    setSelectedDoctor(null)\r\n  };\r\n\r\n    const [doctors, setDoctors] = useState([]);\r\n\r\n    useEffect(() => {\r\n      if (selectedBranch) {\r\n        fetch('http://localhost:8000/api/clinic/doctors', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n          }\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            // Filter the data based on the selected branch\r\n            const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\r\n            setDoctors(filteredData);\r\n          })\r\n          .catch(error => console.error('Error fetching doctors:', error));\r\n      }\r\n    }, [selectedBranch]);\r\n\r\n\r\n    const [appointments, setAppointments] = useState([]);\r\n\r\n    useEffect(() => {\r\n  \r\n      fetch('http://localhost:8000/api/clinic/appointments', {\r\n          method: 'GET',\r\n          headers: {\r\n              'Authorization': `Bearer ${authTokens.access}`,\r\n              'Content-type': 'application/json'\r\n          }\r\n  \r\n      })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          setAppointments(data)\r\n        })\r\n        .catch(error => console.error('Error fetching appointments:', error));\r\n    }, [branches]);\r\n\r\n\r\n  // FUNCTIONS FOR ADDING CLIENTS\r\n\r\n  const [formData, setFormData] = useState({\r\n    first_name: '',\r\n    last_name: '',\r\n    age: '',\r\n    birthday: '',\r\n    contact_number: '',\r\n    emergency_contact_number: '',\r\n    email: '',\r\n    doctor: '',\r\n    appointment_date: new Date().toISOString().split('T')[0],\r\n    appointment_time: '',\r\n    medical_history: '',\r\n    status: 'active',\r\n    appointment_type: 'face_to_face', // Default value set to 'face_to_face'\r\n    branch_id: '', \r\n    userID: null, \r\n  });\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      branch_id: selectedBranch\r\n    })\r\n  }, [selectedBranch])\r\n\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n  const handleClientFormChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\r\n        method: 'PATCH', // Assuming you use a PATCH request to update the time field\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ [timeField]: !currentValue }), // Send the updated time field as false\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the appointment time field\r\n        // You may want to refresh the data or handle it in a way that suits your application\r\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\r\n        fetch('http://localhost:8000/api/clinic/appointments', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n        }\r\n\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            setAppointments(data)\r\n          })\r\n          .catch(error => console.error('Error fetching appointments:', error));\r\n\r\n      } else {\r\n        // Handle the error if the update request fails\r\n        console.error('Failed to update appointment time field');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating appointment time field:', error);\r\n    }\r\n  };\r\n\r\n  const handleClientFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Display confirmation dialog\r\n    const userConfirmed = window.confirm('Do you want to submit the form?');\r\n\r\n    if (userConfirmed) {\r\n      console.log(formData);\r\n      setShowConfirmation(true);\r\n\r\n      try{\r\n\r\n        const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n          },\r\n          body: JSON.stringify({\r\n            first_name: formData.first_name.trim(),\r\n            last_name: formData.last_name.trim(),\r\n            age: formData.age.trim(),\r\n            birthday: formData.birthday.trim(),\r\n            contact_number: formData.contact_number.trim(),\r\n            emergency_contact_number: formData.emergency_contact_number.trim(),\r\n            email: formData.email.trim(),\r\n            doctor: formData.doctor,\r\n            appointment_date: formData.appointment_date.trim(),\r\n            appointment_time: formData.appointment_time.trim(),\r\n            medical_history: formData.medical_history.trim(),\r\n            status: formData.status.trim(),\r\n            appointment_type: formData.appointment_type.trim(),\r\n            branch: formData.branch_id,\r\n            userID: formData.userID\r\n          }),\r\n        })\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n\r\n            // Reset the form data\r\n            setFormData({\r\n              first_name: '',\r\n              last_name: '',\r\n              age: '',\r\n              birthday: '',\r\n              contact_number: '',\r\n              emergency_contact_number: '',\r\n              email: '',\r\n              doctor: '',\r\n              appointment_date: '',\r\n              appointment_time: '',\r\n              medical_history: '',\r\n            });\r\n\r\n            updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\r\n     \r\n            // Fetch the updated appointments if needed\r\n            // (You can replace this with direct state manipulation if necessary)\r\n            fetch('http://localhost:8000/api/clinic/appointments', {\r\n              method: 'GET',\r\n              headers: {\r\n                'Authorization': `Bearer ${authTokens.access}`,\r\n                'Content-type': 'application/json',\r\n              },\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              // Filter the data based on the 'branch' field\r\n              const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\r\n              setAppointments(filteredData);\r\n            })\r\n            .catch(error => console.error('Error fetching appointments:', error));\r\n          } else {\r\n            // Handle the error if the create request fails\r\n            console.error('Failed to create client:', response.statusText);\r\n          }\r\n\r\n      } catch (error) {\r\n\r\n      }\r\n    } else {\r\n      // Handle cancellation if needed\r\n    }\r\n  };\r\n\r\n  // console.log('HAHHAAA: ', branchId)\r\n  console.log('HAHAHAHAHA: ', formData)\r\n\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null)\r\n  const [selectedTimeField, setSelectedTimeField] = useState(null)\r\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null)\r\n\r\n  //appointmentId, timeField, currentValue\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      doctor: selectedDoctor ? selectedDoctor.id : '',\r\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : '',\r\n    })\r\n  }, [selectedDoctor, selectedTimeSlot])\r\n\r\n  console.log(\"NAYAHA: \", formData)\r\n\r\n  useEffect(() => {\r\n    // Update selectedAppointments when selectedDoctor changes\r\n    if (selectedDoctor) {\r\n      const doctorAppointments = appointments.filter(\r\n        (appointment) => appointment.doctor === selectedDoctor.id\r\n      );\r\n      setSelectedAppointments(doctorAppointments);\r\n    }\r\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\r\n\r\n  const handleDoctorClick = (doctor) => {\r\n    setSelectedDoctor(doctor);\r\n  };\r\n\r\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\r\n    setSelectedTimeSlot(timeSlot);\r\n    setSelectedAppointmentId(appointmentId);\r\n    setSelectedTimeField(timeField);\r\n    setSelectedCurrentValue(currentValue);\r\n  }\r\n\r\n  console.log(selectedAppointmentId, selectedCurrentValue, selectedTimeField)\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className='add-client'>\r\n\r\n        <div className='select-branch-buttons'>\r\n            {branches.map((branch) => (\r\n            <button\r\n                key={branch.id}\r\n                onClick={() => handleBranchClick(branch.id)}\r\n                style={{ backgroundColor: selectedBranch === branch.id ? 'blue' : 'lightcoral' }}\r\n            >\r\n                {branch.branch_name}\r\n            </button>\r\n            ))}\r\n        </div>\r\n\r\n        <div>\r\n            {doctors.map((doctor) => (\r\n            <button key={doctor.id} onClick={() => handleDoctorClick(doctor)}\r\n            style={{backgroundColor: selectedDoctor === doctor ? 'blue' : 'lightcoral'}}>\r\n                {doctor.doctor_name}\r\n            </button>\r\n            ))}\r\n        </div>\r\n\r\n        {selectedDoctor && selectedAppointments.length > 0 && (\r\n                <div>\r\n                <h3>Appointments for {selectedDoctor.doctor_name}</h3>\r\n                <ul>\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_8am_9am} style={{backgroundColor: appointment.time_8am_9am || selectedTimeSlot === '8am - 9am' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('8am - 9am', appointment.id, 'time_8am_9am', appointment.time_8am_9am)}>8am - 9am</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_9am_10am} style={{backgroundColor: appointment.time_9am_10am || selectedTimeSlot === '9am - 10am' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('9am - 10am', appointment.id, 'time_9am_10am', appointment.time_9am_10am)}>9am - 10am</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_10am_11am} style={{backgroundColor: appointment.time_10am_11am || selectedTimeSlot === '10am - 11am' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('10am - 11am', appointment.id, 'time_10am_11am', appointment.time_10am_11am)}>10am - 11am</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_11am_12pm} style={{backgroundColor: appointment.time_11am_12pm || selectedTimeSlot === '11am - 12pm' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('11am - 12pm', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm)}>11am - 12pm</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_1pm_2pm} style={{backgroundColor: appointment.time_1pm_2pm || selectedTimeSlot === '1pm - 2pm' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('1pm - 2pm', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm)}>1pm - 2pm</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_2pm_3pm} style={{backgroundColor: appointment.time_2pm_3pm || selectedTimeSlot === '2pm - 3pm' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('2pm - 3pm', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm)}>2pm - 3pm</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_3pm_4pm} style={{backgroundColor: appointment.time_3pm_4pm || selectedTimeSlot === '3pm - 4pm' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('3pm - 4pm', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm)}>3pm - 4pm</button>\r\n                    ))}\r\n                    {selectedAppointments.map((appointment) => (\r\n                    <button disabled={appointment.time_4pm_5pm} style={{backgroundColor: appointment.time_4pm_5pm || selectedTimeSlot === '4pm - 5pm' ? 'red' : 'black'}} onClick={() => handleAppointmentTime('4pm - 5pm', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm)}>4pm - 5pm</button>\r\n                    ))}\r\n                </ul>\r\n                </div>\r\n            )}\r\n\r\n        <form onSubmit={handleClientFormSubmit}>\r\n        <label>\r\n            First Name:\r\n            <input\r\n            type=\"text\"\r\n            name=\"first_name\"\r\n            value={formData.first_name}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Last Name:\r\n            <input\r\n            type=\"text\"\r\n            name=\"last_name\"\r\n            value={formData.last_name}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Age:\r\n            <input\r\n            type=\"text\"\r\n            name=\"age\"\r\n            value={formData.age}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Birthday:\r\n            <input\r\n            type=\"text\"\r\n            name=\"birthday\"\r\n            value={formData.birthday}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Contact Number:\r\n            <input\r\n            type=\"text\"\r\n            name=\"contact_number\"\r\n            value={formData.contact_number}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Emergency Contact Number:\r\n            <input\r\n            type=\"text\"\r\n            name=\"emergency_contact_number\"\r\n            value={formData.emergency_contact_number}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Email:\r\n            <input\r\n            type=\"text\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Medical History:\r\n            <textarea\r\n            name=\"medical_history\"\r\n            value={formData.medical_history}\r\n            onChange={handleClientFormChange}\r\n            />\r\n        </label>\r\n\r\n        <label>\r\n            Appointment Type:\r\n            <select\r\n            name=\"appointment_type\"\r\n            value={formData.appointment_type}\r\n            onChange={handleClientFormChange}\r\n            >\r\n            <option value=\"online\">Online</option>\r\n            <option value=\"face_to_face\">Face to Face</option>\r\n            </select>\r\n        </label>\r\n\r\n        {/* Add your branch_id and userID input fields here */}\r\n\r\n        <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default RegisterForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}