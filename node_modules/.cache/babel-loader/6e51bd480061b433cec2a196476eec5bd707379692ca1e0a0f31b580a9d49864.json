{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\clinic.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  WebSocket\n} = window;\nconst TimeSlots = () => {\n  _s();\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [username, setUsername] = useState('current_user');\n  useEffect(() => {\n    // Fetch initial time slots from Django API\n    fetch('http://localhost:8000/api/timeslots/').then(response => response.json()).then(data => {\n      console.log('Initial time slots:', data);\n      setTimeSlots(data);\n    });\n\n    // Establish WebSocket connection\n    const newSocket = new WebSocket('ws://localhost:8000/ws/timeslot/');\n    newSocket.onopen = () => {\n      console.log('WebSocket connection opened');\n    };\n    newSocket.onclose = event => {\n      console.log('WebSocket connection closed:', event);\n    };\n    newSocket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Cleanup WebSocket connection on component unmount\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  const handleData = data => {\n    const message = JSON.parse(data);\n    console.log('WebSocket message:', message);\n\n    // Refresh time slots after a real-time update\n    fetch('http://localhost:8000/api/timeslots/').then(response => response.json()).then(data => {\n      console.log('Updated time slots:', data);\n      setTimeSlots(data);\n    });\n  };\n  const handleButtonClick = async timeSlotId => {\n    // Send a request to update the time slot on the server\n    await fetch(`http://localhost:8000/api/timeslots/${timeSlotId}/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: username\n      })\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(WebSocket, {\n      url: \"ws://localhost:8000/ws/timeslot/\",\n      onMessage: handleData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), timeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick(slot.id),\n      disabled: slot.user !== null,\n      style: {\n        backgroundColor: slot.user !== null ? 'red' : 'green'\n      },\n      children: [slot.date, \" - \", slot.branch]\n    }, slot.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeSlots, \"O2GNT0D9WVoTMoBK4iTgMDbfQZg=\");\n_c = TimeSlots;\nexport default TimeSlots;\nvar _c;\n$RefreshReg$(_c, \"TimeSlots\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WebSocket","window","TimeSlots","_s","timeSlots","setTimeSlots","username","setUsername","fetch","then","response","json","data","console","log","newSocket","onopen","onclose","event","onerror","error","close","handleData","message","JSON","parse","handleButtonClick","timeSlotId","method","headers","body","stringify","user","children","url","onMessage","fileName","_jsxFileName","lineNumber","columnNumber","map","slot","onClick","id","disabled","style","backgroundColor","date","branch","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/clinic.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst { WebSocket } = window;\r\n\r\nconst TimeSlots = () => {\r\n  const [timeSlots, setTimeSlots] = useState([]);\r\n  const [username, setUsername] = useState('current_user');\r\n\r\n  useEffect(() => {\r\n    // Fetch initial time slots from Django API\r\n    fetch('http://localhost:8000/api/timeslots/')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Initial time slots:', data);\r\n        setTimeSlots(data);\r\n      });\r\n\r\n    // Establish WebSocket connection\r\n    const newSocket = new WebSocket('ws://localhost:8000/ws/timeslot/');\r\n    newSocket.onopen = () => {\r\n      console.log('WebSocket connection opened');\r\n    };\r\n    newSocket.onclose = (event) => {\r\n      console.log('WebSocket connection closed:', event);\r\n    };\r\n    newSocket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n\r\n    // Cleanup WebSocket connection on component unmount\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  const handleData = (data) => {\r\n    const message = JSON.parse(data);\r\n    console.log('WebSocket message:', message);\r\n\r\n    // Refresh time slots after a real-time update\r\n    fetch('http://localhost:8000/api/timeslots/')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Updated time slots:', data);\r\n        setTimeSlots(data);\r\n      });\r\n  };\r\n\r\n  const handleButtonClick = async (timeSlotId) => {\r\n    // Send a request to update the time slot on the server\r\n    await fetch(`http://localhost:8000/api/timeslots/${timeSlotId}/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ user: username }),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* WebSocket component for real-time updates */}\r\n      <WebSocket\r\n        url=\"ws://localhost:8000/ws/timeslot/\"\r\n        onMessage={handleData}\r\n      />\r\n\r\n      {/* Render time slots buttons */}\r\n      {timeSlots.map((slot) => (\r\n        <button\r\n          key={slot.id}\r\n          onClick={() => handleButtonClick(slot.id)}\r\n          disabled={slot.user !== null}\r\n          style={{ backgroundColor: slot.user !== null ? 'red' : 'green' }}\r\n        >\r\n          {slot.date} - {slot.branch}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeSlots;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}