{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diazm\\\\Desktop\\\\calmspace - react\\\\calmspace\\\\src\\\\components\\\\regForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\nimport '../css/client.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterForm = ({\n  openRegForm,\n  setOpenRegForm,\n  setSchedSuccess,\n  setSchedError\n}) => {\n  _s();\n  let {\n    authTokens,\n    user\n  } = useContext(AuthContext);\n  const [branches, setBranches] = useState([]);\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\n  const handleAppointmentTypeChange = appointmentType => {\n    setSelectedAppointmentType(appointmentType);\n  };\n  const [selectedBranch, setSelectedBranch] = useState(null);\n  useEffect(() => {\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${authTokens.access}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      setBranches(data);\n      // Select the first branch by default\n      if (data.length > 0) {\n        setSelectedBranch(data[0].id);\n      }\n    });\n  }, []);\n  const handleBranchClick = branchId => {\n    setSelectedBranch(branchId);\n    setSelectedDoctor(null);\n  };\n  const [doctors, setDoctors] = useState([]);\n  useEffect(() => {\n    if (selectedBranch) {\n      fetch('http://localhost:8000/api/clinic/doctors', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        // Filter the data based on the selected branch\n        const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\n        setDoctors(filteredData);\n      }).catch(error => console.error('Error fetching doctors:', error));\n    }\n  }, [selectedBranch]);\n  const [appointments, setAppointments] = useState([]);\n  useEffect(() => {\n    if (openRegForm) {\n      const fetchAppointments = async () => {\n        try {\n          const response = await fetch('http://localhost:8000/api/clinic/appointments', {\n            method: 'GET',\n            headers: {\n              'Authorization': `Bearer ${authTokens.access}`,\n              'Content-type': 'application/json'\n            }\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setAppointments(data);\n          } else {\n            console.error('Error fetching appointments:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Error fetching appointments:', error);\n        }\n      };\n      fetchAppointments();\n\n      // Set up polling with a 5-second interval\n      const pollingInterval = setInterval(() => {\n        fetchAppointments();\n      }, 5000);\n\n      // Clear the interval when the component unmounts\n      return () => clearInterval(pollingInterval);\n    }\n  }, [openRegForm]);\n  const [advanceAppointments, setAdvanceAppointments] = useState([]);\n  useEffect(() => {\n    const fetchData = () => {\n      fetch('http://localhost:8000/api/clinic/advance-appointments', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        setAdvanceAppointments(data);\n      }).catch(error => console.error('Error fetching appointments:', error));\n    };\n\n    // Fetch data initially\n    fetchData();\n\n    // Set up polling with a 5-second interval\n    const intervalId = setInterval(() => {\n      fetchData();\n    }, 5000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [branches]);\n  const hasExistingScheduleForToday = async () => {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const response = await fetch('http://localhost:8000/api/clinic/clients', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return data.some(client => client.userID === user.user_id && client.appointment_date === today);\n      } else {\n        console.error('Error fetching clients:', response.statusText);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking existing schedule:', error);\n      return false;\n    }\n  };\n\n  // FUNCTIONS FOR ADDING CLIENTS\n\n  const [formData, setFormData] = useState({\n    first_name: '',\n    last_name: '',\n    age: '',\n    gender: 'Male',\n    birthday: '',\n    contact_number: '',\n    emergency_contact_number: '',\n    email: '',\n    doctor: '',\n    appointment_date: '',\n    appointment_time: '',\n    medical_history: '',\n    status: 'active',\n    branch_id: '',\n    userID: null,\n    street_address: '',\n    barangay: '',\n    city_town: '',\n    province: '',\n    postal_code: '',\n    country: ''\n  });\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      branch_id: selectedBranch,\n      userID: user.user_id\n    });\n  }, [selectedBranch]);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const handleClientFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\n    try {\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\n        method: 'PATCH',\n        // Assuming you use a PATCH request to update the time field\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [timeField]: !currentValue\n        }) // Send the updated time field as false\n      });\n      if (response.ok) {\n        // Successfully updated the appointment time field\n        // You may want to refresh the data or handle it in a way that suits your application\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\n        fetch('http://localhost:8000/api/clinic/appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          setAppointments(data);\n        }).catch(error => console.error('Error fetching appointments:', error));\n      } else {\n        // Handle the error if the update request fails\n        console.error('Failed to update appointment time field');\n      }\n    } catch (error) {\n      console.error('Error updating appointment time field:', error);\n    }\n  };\n  const updateAdvanceAppointmentTime = async (appointmentId, timeField, currentValue) => {\n    try {\n      const response = await fetch(`http://localhost:8000/update-advance-appointment/${appointmentId}/`, {\n        method: 'PATCH',\n        // Assuming you use a PATCH request to update the time field\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          [timeField]: !currentValue\n        }) // Send the updated time field as false\n      });\n      if (response.ok) {\n        // Successfully updated the appointment time field\n        // You may want to refresh the data or handle it in a way that suits your application\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\n        fetch('http://localhost:8000/api/clinic/advance-appointments', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${authTokens.access}`,\n            'Content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(data => {\n          // Filter the data based on the 'branch' field\n          const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\n          setAdvanceAppointments(filteredData);\n        }).catch(error => console.error('Error fetching appointments:', error));\n      } else {\n        // Handle the error if the update request fails\n        console.error('Failed to update appointment time field');\n      }\n    } catch (error) {\n      console.error('Error updating appointment time field:', error);\n    }\n  };\n  const [selectedAppointmentDate, setSelectedAppointmentDate] = useState('appointment'); // Default to 'appointment'\n\n  const [showCreationConfirmation, setShowCreationConfirmation] = useState(false);\n  const timeFieldMappings = {\n    '8:00 AM': 'time_8am_9am',\n    '9:00 AM': 'time_9am_10am',\n    '10:00 AM': 'time_10am_11am',\n    '11:00 AM': 'time_11am_12pm',\n    '1:00 PM': 'time_1pm_2pm',\n    '2:00 PM': 'time_2pm_3pm',\n    '3:00 PM': 'time_3pm_4pm',\n    '4:00 PM': 'time_4pm_5pm',\n    '8:00am': 'time_8am_9am',\n    '9:00am': 'time_9am_10am',\n    '10:00am': 'time_10am_11am',\n    '11:00am': 'time_11am_12pm',\n    '1:00pm': 'time_1pm_2pm',\n    '2:00pm': 'time_2pm_3pm',\n    '3:00pm': 'time_3pm_4pm',\n    '4:00pm': 'time_4pm_5pm'\n  };\n  const checkTimeSlotAvailability = async (appointmentType, appointmentId, appointmentTime) => {\n    try {\n      const jsonTimeFormat = timeFieldMappings[appointmentTime];\n      if (!jsonTimeFormat) {\n        console.error('Invalid appointment time:', appointmentTime);\n        return false;\n      }\n      const response = await fetch(`http://localhost:8000/check-time-slot-availability/${appointmentId}/`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${authTokens.access}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          appointment_type: appointmentType,\n          appointment_time: jsonTimeFormat\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return data.available;\n      } else {\n        console.error('Failed to check time slot availability:', response.statusText);\n        return false;\n      }\n    } catch (error) {\n      console.error('Error checking time slot availability:', error);\n      return false;\n    }\n  };\n  const handleClientFormSubmit = e => {\n    e.preventDefault();\n    // Display confirmation dialog\n    setShowCreationConfirmation(true);\n  };\n  const handleConfirm = async () => {\n    const existingScheduleForToday = await hasExistingScheduleForToday();\n    if (existingScheduleForToday) {\n      window.alert('Sorry! You already have a scheduled appointment for today.');\n    } else {\n      const isTimeSlotAvailable = await checkTimeSlotAvailability(selectedAppointmentDate, selectedAppointmentId, formData.appointment_time.trim());\n      if (isTimeSlotAvailable) {\n        window.alert('The selected appointment time slot is not available. Please choose another time slot.');\n        return; // Abort the posting process\n      }\n      console.log(isTimeSlotAvailable);\n      if (selectedAppointmentDate === 'appointment') {\n        try {\n          const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${authTokens.access}`\n            },\n            body: JSON.stringify({\n              first_name: formData.first_name.trim(),\n              last_name: formData.last_name.trim(),\n              age: formData.age.trim(),\n              gender: formData.gender.trim(),\n              birthday: formData.birthday.trim(),\n              contact_number: formData.contact_number.trim(),\n              emergency_contact_number: formData.emergency_contact_number.trim(),\n              email: formData.email.trim(),\n              doctor: formData.doctor,\n              appointment_date: new Date().toISOString().split('T')[0],\n              appointment_time: formData.appointment_time.trim(),\n              medical_history: formData.medical_history.trim(),\n              status: formData.status.trim(),\n              branch: formData.branch_id,\n              userID: formData.userID,\n              street_address: formData.street_address.trim(),\n              barangay: formData.barangay.trim(),\n              city_town: formData.city_town.trim(),\n              province: formData.province.trim(),\n              postal_code: formData.postal_code.trim(),\n              country: formData.country.trim()\n            })\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setSchedSuccess(true);\n            // Reset the form data\n            setFormData({\n              first_name: '',\n              last_name: '',\n              age: '',\n              gender: 'Male',\n              birthday: '',\n              contact_number: '',\n              emergency_contact_number: '',\n              email: '',\n              doctor: '',\n              appointment_date: '',\n              appointment_time: '',\n              medical_history: '',\n              street_address: '',\n              barangay: '',\n              city_town: '',\n              province: '',\n              postal_code: '',\n              country: ''\n            });\n            updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\n            setOpenRegForm(false);\n\n            // Fetch the updated appointments if needed\n            // (You can replace this with direct state manipulation if necessary)\n            fetch('http://localhost:8000/api/clinic/appointments', {\n              method: 'GET',\n              headers: {\n                'Authorization': `Bearer ${authTokens.access}`,\n                'Content-type': 'application/json'\n              }\n            }).then(response => response.json()).then(data => {\n              setAppointments(data);\n            }).catch(error => console.error('Error fetching appointments:', error));\n          } else {\n            // Handle the error if the create request fails\n            setSchedError(true);\n            console.error('Failed to create client:', response.statusText);\n          }\n        } catch (error) {}\n      } else if (selectedAppointmentDate === 'advance-appointment') {\n        const today = new Date();\n        const tomorrow = new Date(today);\n        tomorrow.setDate(today.getDate() + 1);\n        try {\n          const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${authTokens.access}`\n            },\n            body: JSON.stringify({\n              first_name: formData.first_name.trim(),\n              last_name: formData.last_name.trim(),\n              age: formData.age.trim(),\n              gender: formData.gender.trim(),\n              birthday: formData.birthday.trim(),\n              contact_number: formData.contact_number.trim(),\n              emergency_contact_number: formData.emergency_contact_number.trim(),\n              email: formData.email.trim(),\n              doctor: formData.doctor,\n              appointment_date: tomorrow.toISOString().split('T')[0],\n              appointment_time: formData.appointment_time.trim(),\n              medical_history: formData.medical_history.trim(),\n              status: formData.status.trim(),\n              branch: formData.branch_id,\n              userID: formData.userID,\n              street_address: formData.street_address.trim(),\n              barangay: formData.barangay.trim(),\n              city_town: formData.city_town.trim(),\n              province: formData.province.trim(),\n              postal_code: formData.postal_code.trim(),\n              country: formData.country.trim()\n            })\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setSchedSuccess(true);\n            // Reset the form data\n            setFormData({\n              first_name: '',\n              last_name: '',\n              age: '',\n              gender: 'Male',\n              birthday: '',\n              contact_number: '',\n              emergency_contact_number: '',\n              email: '',\n              doctor: '',\n              appointment_date: '',\n              appointment_time: '',\n              medical_history: '',\n              street_address: '',\n              barangay: '',\n              city_town: '',\n              province: '',\n              postal_code: '',\n              country: ''\n            });\n            updateAdvanceAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\n            setOpenRegForm(false);\n\n            // Fetch the updated appointments if needed\n            // (You can replace this with direct state manipulation if necessary)\n            fetch('http://localhost:8000/api/clinic/advance-appointments', {\n              method: 'GET',\n              headers: {\n                'Authorization': `Bearer ${authTokens.access}`,\n                'Content-type': 'application/json'\n              }\n            }).then(response => response.json()).then(data => {\n              // Filter the data based on the 'branch' field\n              const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\n              setAdvanceAppointments(filteredData);\n            }).catch(error => console.error('Error fetching appointments:', error));\n          } else {\n            // Handle the error if the create request fails\n            setSchedError(true);\n            console.error('Failed to create client:', response.statusText);\n          }\n        } catch (error) {}\n      }\n    }\n    setShowCreationConfirmation(false);\n  };\n  const handleCancel = () => {\n    setShowCreationConfirmation(false); // Hide confirmation dialog if user cancels\n  };\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);\n  const [selectedTimeField, setSelectedTimeField] = useState(null);\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null);\n  const [selectedAdvanceAppointments, setSelectedAdvanceAppointments] = useState([]);\n\n  //appointmentId, timeField, currentValue\n\n  useEffect(() => {\n    setFormData({\n      ...formData,\n      doctor: selectedDoctor ? selectedDoctor.id : '',\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : ''\n    });\n  }, [selectedDoctor, selectedTimeSlot]);\n  useEffect(() => {\n    // Update selectedAppointments when selectedDoctor changes\n    if (selectedDoctor) {\n      const doctorAppointments = appointments.filter(appointment => appointment.doctor === selectedDoctor.id);\n      setSelectedAppointments(doctorAppointments);\n    }\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\n\n  useEffect(() => {\n    // Update selectedAppointments when selectedDoctor changes\n    if (selectedDoctor) {\n      const doctorAppointments = advanceAppointments.filter(appointment => appointment.doctor === selectedDoctor.id);\n      setSelectedAdvanceAppointments(doctorAppointments);\n    }\n  }, [selectedDoctor, doctors, advanceAppointments]); // Watch for changes in selectedDoctor\n\n  const handleDoctorClick = doctor => {\n    setSelectedDoctor(doctor);\n    setSelectedTimeSlot('');\n  };\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\n    setSelectedTimeSlot(timeSlot);\n    setSelectedAppointmentId(appointmentId);\n    setSelectedTimeField(timeField);\n    setSelectedCurrentValue(currentValue);\n  };\n  const handleAppointmentToday = () => {\n    setSelectedAppointmentDate('appointment');\n    setSelectedTimeSlot('');\n  };\n  const handleAppointmentTomorrow = () => {\n    setSelectedAppointmentDate('advance-appointment');\n    setSelectedTimeSlot('');\n  };\n  const isPastTimeSlot = timeSlot => {\n    const currentTime = new Date();\n    const timeSlotHour = parseInt(timeSlot.split(':')[0]);\n    const timeSlotMinute = parseInt(timeSlot.split(':')[1]);\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n\n    // Check if current hour is greater than time slot hour\n    if (currentHour > timeSlotHour) {\n      return true;\n    } else if (currentHour === timeSlotHour && currentMinute >= timeSlotMinute + 30) {\n      // If current hour is equal to time slot hour, \n      // check if current minute is 30 minutes or more past time slot minute\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-client\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close-btn\",\n        onClick: () => {\n          setOpenRegForm(false);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n          name: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 1. Select clinic branch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-doctor-btns\",\n          children: branches.map(branch => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleBranchClick(branch.id),\n            style: {\n              backgroundColor: selectedBranch === branch.id ? '#0b3d72' : '#5d9add'\n            },\n            children: branch.branch_name\n          }, branch.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 2. Select a doctor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-doctor-btns\",\n          children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDoctorClick(doctor),\n            style: {\n              backgroundColor: selectedDoctor === doctor ? '#0b3d72' : '#5d9add'\n            },\n            children: doctor.doctor_name\n          }, doctor.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 9\n      }, this), selectedDoctor && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-doctor\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 3. Select date of appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-doctor-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAppointmentToday,\n            style: {\n              backgroundColor: selectedAppointmentDate === 'appointment' ? '#0b3d72' : '#5d9add'\n            },\n            children: \"Regular Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAppointmentTomorrow,\n            style: {\n              backgroundColor: selectedAppointmentDate === 'advance-appointment' ? '#0b3d72' : '#5d9add'\n            },\n            children: \"Advance Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 11\n      }, this), selectedAppointmentDate === 'appointment' && selectedAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 4. Select time of appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Today's schedule of Dr./Dra. \", selectedDoctor.doctor_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scheds\",\n          children: [selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('8:00 AM') || appointment.time_8am_9am,\n            style: {\n              backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am),\n            children: \"8:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('9:00 AM') || appointment.time_9am_10am,\n            style: {\n              backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am),\n            children: \"9:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('10:00 AM') || appointment.time_10am_11am,\n            style: {\n              backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am),\n            children: \"10:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('11:00 AM') || appointment.time_11am_12pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm),\n            children: \"11:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('13:00 PM') || appointment.time_1pm_2pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm),\n            children: \"1:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('14:00 PM') || appointment.time_2pm_3pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm),\n            children: \"2:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('15:00 PM') || appointment.time_3pm_4pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm),\n            children: \"3:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 25\n          }, this)), selectedAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: isPastTimeSlot('16:00 PM') || appointment.time_4pm_5pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm),\n            children: \"4:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 17\n      }, this), selectedDoctor && selectedAppointmentDate === 'advance-appointment' && selectedAdvanceAppointments.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 4. Select time of appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Tomorrow's schedule of Dr./Dra. \", selectedDoctor.doctor_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scheds\",\n          children: [selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_8am_9am,\n            style: {\n              backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am),\n            children: \"8:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_9am_10am,\n            style: {\n              backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am),\n            children: \"9:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_10am_11am,\n            style: {\n              backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am),\n            children: \"10:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_11am_12pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm),\n            children: \"11:00 AM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_1pm_2pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm),\n            children: \"1:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_2pm_3pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm),\n            children: \"2:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_3pm_4pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm),\n            children: \"3:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 25\n          }, this)), selectedAdvanceAppointments.map(appointment => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sched-btns\",\n            disabled: appointment.time_4pm_5pm,\n            style: {\n              backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''\n            },\n            onClick: () => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm),\n            children: \"4:00 PM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleClientFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Step 5. Fill out these informations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"name\",\n            type: \"text\",\n            name: \"first_name\",\n            value: formData.first_name,\n            onChange: handleClientFormChange,\n            placeholder: \"First name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"name\",\n            type: \"text\",\n            name: \"last_name\",\n            value: formData.last_name,\n            onChange: handleClientFormChange,\n            placeholder: \"Last name\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"contacts\",\n            type: \"text\",\n            name: \"contact_number\",\n            value: formData.contact_number,\n            onChange: handleClientFormChange,\n            placeholder: \"Contact number\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 781,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"contacts\",\n            type: \"text\",\n            name: \"emergency_contact_number\",\n            value: formData.emergency_contact_number,\n            onChange: handleClientFormChange,\n            placeholder: \"Emergency contact number\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"demographs\",\n            children: [\"Age:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"age\",\n              value: formData.age,\n              onChange: handleClientFormChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"demographs\",\n            children: [\"Gender:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"gender\",\n              value: formData.gender,\n              onChange: handleClientFormChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Male\",\n                children: \"Male\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 823,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Female\",\n                children: \"Female\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Other\",\n                children: \"Other\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"demographs\",\n            children: [\"Birthday:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"birthday\",\n              value: formData.birthday,\n              onChange: handleClientFormChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"one-input\",\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"email\",\n            value: formData.email,\n            onChange: handleClientFormChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"one-input\",\n          children: [\"Medical History (Optional):\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"medical_history\",\n            value: formData.medical_history,\n            onChange: handleClientFormChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 854,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"street_address\",\n            value: formData.street_address,\n            onChange: handleClientFormChange,\n            placeholder: \"Street address\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"barangay\",\n            value: formData.barangay,\n            onChange: handleClientFormChange,\n            placeholder: \"Barangay\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"city_town\",\n            value: formData.city_town,\n            onChange: handleClientFormChange,\n            placeholder: \"City/Town\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 886,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"province\",\n            value: formData.province,\n            onChange: handleClientFormChange,\n            placeholder: \"Province\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"multi-inputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"number\",\n            name: \"postal_code\",\n            value: formData.postal_code,\n            onChange: handleClientFormChange,\n            placeholder: \"Postal Code\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"address\",\n            type: \"text\",\n            name: \"country\",\n            value: formData.country,\n            onChange: handleClientFormChange,\n            placeholder: \"Country\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"confirmation-btn-yes\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 933,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 932,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 7\n    }, this), showCreationConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-popup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm Submission\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to submit the form?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 941,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirmation-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCancel,\n            className: \"confirmation-btn-no\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 943,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleConfirm,\n            className: \"confirmation-btn-yes\",\n            children: \"Confirm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 942,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 633,\n    columnNumber: 5\n  }, this);\n};\n_s(RegisterForm, \"U2Eq7dvryEmOWkddvxYvOlASHhg=\");\n_c = RegisterForm;\nexport default RegisterForm;\nvar _c;\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","RegisterForm","openRegForm","setOpenRegForm","setSchedSuccess","setSchedError","_s","authTokens","user","branches","setBranches","selectedAppointmentType","setSelectedAppointmentType","handleAppointmentTypeChange","appointmentType","selectedBranch","setSelectedBranch","fetch","method","headers","access","then","res","json","data","length","id","handleBranchClick","branchId","setSelectedDoctor","doctors","setDoctors","response","filteredData","filter","doctor","branch_name","catch","error","console","appointments","setAppointments","fetchAppointments","ok","statusText","pollingInterval","setInterval","clearInterval","advanceAppointments","setAdvanceAppointments","fetchData","intervalId","hasExistingScheduleForToday","today","Date","toISOString","split","some","client","userID","user_id","appointment_date","formData","setFormData","first_name","last_name","age","gender","birthday","contact_number","emergency_contact_number","email","appointment_time","medical_history","status","branch_id","street_address","barangay","city_town","province","postal_code","country","showConfirmation","setShowConfirmation","handleClientFormChange","e","name","value","target","prevData","updateAppointmentTime","appointmentId","timeField","currentValue","body","JSON","stringify","log","updateAdvanceAppointmentTime","appointment","branch","selectedAppointmentDate","setSelectedAppointmentDate","showCreationConfirmation","setShowCreationConfirmation","timeFieldMappings","checkTimeSlotAvailability","appointmentTime","jsonTimeFormat","appointment_type","available","handleClientFormSubmit","preventDefault","handleConfirm","existingScheduleForToday","window","alert","isTimeSlotAvailable","selectedAppointmentId","trim","selectedTimeField","selectedCurrentValue","tomorrow","setDate","getDate","handleCancel","selectedDoctor","selectedAppointments","setSelectedAppointments","selectedTimeSlot","setSelectedTimeSlot","setSelectedAppointmentId","setSelectedTimeField","setSelectedCurrentValue","selectedAdvanceAppointments","setSelectedAdvanceAppointments","doctorAppointments","handleDoctorClick","handleAppointmentTime","timeSlot","handleAppointmentToday","handleAppointmentTomorrow","isPastTimeSlot","currentTime","timeSlotHour","parseInt","timeSlotMinute","currentHour","getHours","currentMinute","getMinutes","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","style","backgroundColor","doctor_name","disabled","time_8am_9am","time_9am_10am","time_10am_11am","time_11am_12pm","time_1pm_2pm","time_2pm_3pm","time_3pm_4pm","time_4pm_5pm","onSubmit","type","onChange","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/diazm/Desktop/calmspace - react/calmspace/src/components/regForm.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport AuthContext from '../context/AuthContext'\r\nimport '../css/client.css';\r\n\r\nconst RegisterForm = ({ openRegForm, setOpenRegForm, setSchedSuccess, setSchedError }) => {\r\n\r\n  let {authTokens, user} = useContext(AuthContext);\r\n\r\n\r\n  const [branches, setBranches] = useState([]);\r\n\r\n\r\n  const [selectedAppointmentType, setSelectedAppointmentType] = useState(null);\r\n\r\n  const handleAppointmentTypeChange = (appointmentType) => {\r\n    setSelectedAppointmentType(appointmentType);\r\n  };\r\n\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('http://127.0.0.1:8000/api/clinic/branches', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${authTokens.access}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setBranches(data);\r\n        // Select the first branch by default\r\n        if (data.length > 0) {\r\n          setSelectedBranch(data[0].id);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  const handleBranchClick = (branchId) => {\r\n    setSelectedBranch(branchId);\r\n    setSelectedDoctor(null)\r\n  };\r\n\r\n    const [doctors, setDoctors] = useState([]);\r\n\r\n    useEffect(() => {\r\n      if (selectedBranch) {\r\n        fetch('http://localhost:8000/api/clinic/doctors', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n          }\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            // Filter the data based on the selected branch\r\n            const filteredData = data.filter(doctor => doctor.branch_name === selectedBranch);\r\n            setDoctors(filteredData);\r\n          })\r\n          .catch(error => console.error('Error fetching doctors:', error));\r\n      }\r\n    }, [selectedBranch]);\r\n\r\n\r\n    const [appointments, setAppointments] = useState([]);\r\n\r\n    useEffect(() => {\r\n  \r\n      if(openRegForm){\r\n        const fetchAppointments = async () => {\r\n          try {\r\n            const response = await fetch('http://localhost:8000/api/clinic/appointments', {\r\n              method: 'GET',\r\n              headers: {\r\n                'Authorization': `Bearer ${authTokens.access}`,\r\n                'Content-type': 'application/json',\r\n              }\r\n            });\r\n    \r\n            if (response.ok) {\r\n              const data = await response.json();\r\n              setAppointments(data);\r\n            } else {\r\n              console.error('Error fetching appointments:', response.statusText);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching appointments:', error);\r\n          }\r\n        };\r\n\r\n        fetchAppointments();\r\n\r\n          // Set up polling with a 5-second interval\r\n          const pollingInterval = setInterval(() => {\r\n            fetchAppointments();\r\n          }, 5000);\r\n\r\n          // Clear the interval when the component unmounts\r\n          return () => clearInterval(pollingInterval);\r\n      }\r\n    \r\n      }, [openRegForm]);\r\n\r\n      const [advanceAppointments, setAdvanceAppointments] = useState([]);\r\n\r\n      useEffect(() => {\r\n        \r\n          const fetchData = () => {\r\n            fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n              method: 'GET',\r\n              headers: {\r\n                'Authorization': `Bearer ${authTokens.access}`,\r\n                'Content-type': 'application/json'\r\n              }\r\n            })\r\n              .then(response => response.json())\r\n              .then(data => {\r\n                setAdvanceAppointments(data);\r\n              })\r\n              .catch(error => console.error('Error fetching appointments:', error));\r\n          };\r\n      \r\n          // Fetch data initially\r\n          fetchData();\r\n      \r\n          // Set up polling with a 5-second interval\r\n          const intervalId = setInterval(() => {\r\n            fetchData();\r\n          }, 5000);\r\n\r\n          // Cleanup interval on component unmount\r\n          return () => clearInterval(intervalId);\r\n\r\n    \r\n      }, [branches]);\r\n    \r\n\r\n    const hasExistingScheduleForToday = async () => {\r\n        try {\r\n          const today = new Date().toISOString().split('T')[0];\r\n          const response = await fetch('http://localhost:8000/api/clinic/clients', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Authorization': `Bearer ${authTokens.access}`,\r\n              'Content-type': 'application/json',\r\n            }\r\n          });\r\n    \r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            return data.some(\r\n              (client) =>\r\n                client.userID === user.user_id &&\r\n                client.appointment_date === today\r\n            );\r\n          } else {\r\n            console.error('Error fetching clients:', response.statusText);\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error checking existing schedule:', error);\r\n          return false;\r\n        }\r\n      };\r\n\r\n  // FUNCTIONS FOR ADDING CLIENTS\r\n\r\n  const [formData, setFormData] = useState({\r\n    first_name: '',\r\n    last_name: '',\r\n    age: '',\r\n    gender: 'Male',\r\n    birthday: '',\r\n    contact_number: '',\r\n    emergency_contact_number: '',\r\n    email: '',\r\n    doctor: '',\r\n    appointment_date: '',\r\n    appointment_time: '',\r\n    medical_history: '',\r\n    status: 'active',\r\n    branch_id: '', \r\n    userID: null, \r\n    street_address: '',\r\n    barangay: '',\r\n    city_town: '',\r\n    province: '',\r\n    postal_code: '',\r\n    country: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      branch_id: selectedBranch,\r\n      userID: user.user_id\r\n    })\r\n  }, [selectedBranch])\r\n\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n  const handleClientFormChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n  const updateAppointmentTime = async (appointmentId, timeField, currentValue) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/update-appointment/${appointmentId}/`, {\r\n        method: 'PATCH', // Assuming you use a PATCH request to update the time field\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ [timeField]: !currentValue }), // Send the updated time field as false\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the appointment time field\r\n        // You may want to refresh the data or handle it in a way that suits your application\r\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\r\n        fetch('http://localhost:8000/api/clinic/appointments', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n        }\r\n\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            setAppointments(data)\r\n          })\r\n          .catch(error => console.error('Error fetching appointments:', error));\r\n\r\n      } else {\r\n        // Handle the error if the update request fails\r\n        console.error('Failed to update appointment time field');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating appointment time field:', error);\r\n    }\r\n  };\r\n  const updateAdvanceAppointmentTime = async (appointmentId, timeField, currentValue) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/update-advance-appointment/${appointmentId}/`, {\r\n        method: 'PATCH', // Assuming you use a PATCH request to update the time field\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ [timeField]: !currentValue }), // Send the updated time field as false\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the appointment time field\r\n        // You may want to refresh the data or handle it in a way that suits your application\r\n        console.log(`Successfully updated ${timeField} for appointment ${appointmentId}`);\r\n        fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${authTokens.access}`,\r\n            'Content-type': 'application/json'\r\n        }\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            // Filter the data based on the 'branch' field\r\n            const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\r\n            setAdvanceAppointments(filteredData)\r\n          })\r\n          .catch(error => console.error('Error fetching appointments:', error));\r\n\r\n      } else {\r\n        // Handle the error if the update request fails\r\n        console.error('Failed to update appointment time field');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating appointment time field:', error);\r\n    }\r\n  };\r\n\r\n  const [selectedAppointmentDate, setSelectedAppointmentDate] = useState('appointment'); // Default to 'appointment'\r\n\r\n  const [showCreationConfirmation, setShowCreationConfirmation] = useState(false);\r\n\r\n  const timeFieldMappings = {\r\n    '8:00 AM': 'time_8am_9am',\r\n    '9:00 AM': 'time_9am_10am',\r\n    '10:00 AM': 'time_10am_11am',\r\n    '11:00 AM': 'time_11am_12pm',\r\n    '1:00 PM': 'time_1pm_2pm',\r\n    '2:00 PM': 'time_2pm_3pm',\r\n    '3:00 PM': 'time_3pm_4pm',\r\n    '4:00 PM': 'time_4pm_5pm',\r\n    '8:00am': 'time_8am_9am',\r\n    '9:00am': 'time_9am_10am',\r\n    '10:00am': 'time_10am_11am',\r\n    '11:00am': 'time_11am_12pm',\r\n    '1:00pm': 'time_1pm_2pm',\r\n    '2:00pm': 'time_2pm_3pm',\r\n    '3:00pm': 'time_3pm_4pm',\r\n    '4:00pm': 'time_4pm_5pm',\r\n  };\r\n\r\n  const checkTimeSlotAvailability = async (appointmentType, appointmentId, appointmentTime) => {\r\n    try {\r\n\r\n      const jsonTimeFormat = timeFieldMappings[appointmentTime];\r\n\r\n      if (!jsonTimeFormat) {\r\n        console.error('Invalid appointment time:', appointmentTime);\r\n        return false;\r\n      }\r\n\r\n      const response = await fetch(`http://localhost:8000/check-time-slot-availability/${appointmentId}/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${authTokens.access}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          appointment_type: appointmentType,\r\n          appointment_time: jsonTimeFormat\r\n        }), \r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        return data.available;\r\n      } else {\r\n        console.error('Failed to check time slot availability:', response.statusText);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking time slot availability:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleClientFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Display confirmation dialog\r\n    setShowCreationConfirmation(true);\r\n  };\r\n\r\n  const handleConfirm = async () => {\r\n\r\n      const existingScheduleForToday = await hasExistingScheduleForToday();\r\n\r\n      if (existingScheduleForToday){\r\n        window.alert('Sorry! You already have a scheduled appointment for today.')\r\n      } else{\r\n\r\n          const isTimeSlotAvailable = await checkTimeSlotAvailability(selectedAppointmentDate, selectedAppointmentId, formData.appointment_time.trim());\r\n\r\n          if (isTimeSlotAvailable) {\r\n              window.alert('The selected appointment time slot is not available. Please choose another time slot.');\r\n              return; // Abort the posting process\r\n          }\r\n\r\n          console.log(isTimeSlotAvailable)\r\n\r\n          if (selectedAppointmentDate === 'appointment'){\r\n            try{\r\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${authTokens.access}`,\r\n                },\r\n                body: JSON.stringify({\r\n                  first_name: formData.first_name.trim(),\r\n                  last_name: formData.last_name.trim(),\r\n                  age: formData.age.trim(),\r\n                  gender: formData.gender.trim(),\r\n                  birthday: formData.birthday.trim(),\r\n                  contact_number: formData.contact_number.trim(),\r\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\r\n                  email: formData.email.trim(),\r\n                  doctor: formData.doctor,\r\n                  appointment_date: new Date().toISOString().split('T')[0],\r\n                  appointment_time: formData.appointment_time.trim(),\r\n                  medical_history: formData.medical_history.trim(),\r\n                  status: formData.status.trim(),\r\n                  branch: formData.branch_id,\r\n                  userID: formData.userID,\r\n                  street_address: formData.street_address.trim(),\r\n                  barangay: formData.barangay.trim(),\r\n                  city_town: formData.city_town.trim(),\r\n                  province: formData.province.trim(),\r\n                  postal_code: formData.postal_code.trim(),\r\n                  country: formData.country.trim(),\r\n                }),\r\n              })\r\n      \r\n                if (response.ok) {\r\n                  const data = await response.json();\r\n      \r\n                  setSchedSuccess(true);\r\n                  // Reset the form data\r\n                  setFormData({\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    age: '',\r\n                    gender: 'Male',\r\n                    birthday: '',\r\n                    contact_number: '',\r\n                    emergency_contact_number: '',\r\n                    email: '',\r\n                    doctor: '',\r\n                    appointment_date: '',\r\n                    appointment_time: '',\r\n                    medical_history: '',\r\n                    street_address: '',\r\n                    barangay: '',\r\n                    city_town: '',\r\n                    province: '',\r\n                    postal_code: '',\r\n                    country: '',\r\n                  });\r\n                  \r\n                  updateAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\r\n                  setOpenRegForm(false)\r\n\r\n                  // Fetch the updated appointments if needed\r\n                  // (You can replace this with direct state manipulation if necessary)\r\n                  fetch('http://localhost:8000/api/clinic/appointments', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Authorization': `Bearer ${authTokens.access}`,\r\n                      'Content-type': 'application/json',\r\n                    },\r\n                  })\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                    setAppointments(data);\r\n                  })\r\n                  .catch(error => console.error('Error fetching appointments:', error));\r\n                } else {\r\n                  // Handle the error if the create request fails\r\n                  setSchedError(true)\r\n                  console.error('Failed to create client:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n              \r\n            }\r\n          } else if (selectedAppointmentDate === 'advance-appointment'){\r\n            const today = new Date();\r\n            const tomorrow = new Date(today);\r\n            tomorrow.setDate(today.getDate() + 1);\r\n  \r\n            try{\r\n              const response = await fetch('http://localhost:8000/api/clinic/clients/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                  'Authorization': `Bearer ${authTokens.access}`,\r\n                },\r\n                body: JSON.stringify({\r\n                  first_name: formData.first_name.trim(),\r\n                  last_name: formData.last_name.trim(),\r\n                  age: formData.age.trim(),\r\n                  gender: formData.gender.trim(),\r\n                  birthday: formData.birthday.trim(),\r\n                  contact_number: formData.contact_number.trim(),\r\n                  emergency_contact_number: formData.emergency_contact_number.trim(),\r\n                  email: formData.email.trim(),\r\n                  doctor: formData.doctor,\r\n                  appointment_date: tomorrow.toISOString().split('T')[0],\r\n                  appointment_time: formData.appointment_time.trim(),\r\n                  medical_history: formData.medical_history.trim(),\r\n                  status: formData.status.trim(),\r\n                  branch: formData.branch_id,\r\n                  userID: formData.userID,\r\n                  street_address: formData.street_address.trim(),\r\n                  barangay: formData.barangay.trim(),\r\n                  city_town: formData.city_town.trim(),\r\n                  province: formData.province.trim(),\r\n                  postal_code: formData.postal_code.trim(),\r\n                  country: formData.country.trim(),\r\n                }),\r\n              })\r\n      \r\n                if (response.ok) {\r\n                  const data = await response.json();\r\n      \r\n                  setSchedSuccess(true)\r\n                  // Reset the form data\r\n                  setFormData({\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    age: '',\r\n                    gender: 'Male',\r\n                    birthday: '',\r\n                    contact_number: '',\r\n                    emergency_contact_number: '',\r\n                    email: '',\r\n                    doctor: '',\r\n                    appointment_date: '',\r\n                    appointment_time: '',\r\n                    medical_history: '',\r\n                    street_address: '',\r\n                    barangay: '',\r\n                    city_town: '',\r\n                    province: '',\r\n                    postal_code: '',\r\n                    country: '',\r\n                  });\r\n      \r\n                  updateAdvanceAppointmentTime(selectedAppointmentId, selectedTimeField, selectedCurrentValue);\r\n                  setOpenRegForm(false)\r\n\r\n                  // Fetch the updated appointments if needed\r\n                  // (You can replace this with direct state manipulation if necessary)\r\n                  fetch('http://localhost:8000/api/clinic/advance-appointments', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Authorization': `Bearer ${authTokens.access}`,\r\n                      'Content-type': 'application/json',\r\n                    },\r\n                  })\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                    // Filter the data based on the 'branch' field\r\n                    const filteredData = data.filter(appointment => appointment.branch === user.branch.id);\r\n                    setAdvanceAppointments(filteredData);\r\n                  })\r\n                  .catch(error => console.error('Error fetching appointments:', error));\r\n                } else {\r\n                  // Handle the error if the create request fails\r\n                  setSchedError(true)\r\n                  console.error('Failed to create client:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n              \r\n            }\r\n          }\r\n      }\r\n      setShowCreationConfirmation(false)\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShowCreationConfirmation(false); // Hide confirmation dialog if user cancels\r\n  };\r\n\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [selectedAppointments, setSelectedAppointments] = useState([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null)\r\n  const [selectedTimeField, setSelectedTimeField] = useState(null)\r\n  const [selectedCurrentValue, setSelectedCurrentValue] = useState(null)\r\n\r\n  const [selectedAdvanceAppointments, setSelectedAdvanceAppointments] = useState([]);\r\n\r\n  //appointmentId, timeField, currentValue\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      doctor: selectedDoctor ? selectedDoctor.id : '',\r\n      appointment_time: selectedTimeSlot ? selectedTimeSlot : '',\r\n    })\r\n  }, [selectedDoctor, selectedTimeSlot])\r\n\r\n  useEffect(() => {\r\n    // Update selectedAppointments when selectedDoctor changes\r\n    if (selectedDoctor) {\r\n      const doctorAppointments = appointments.filter(\r\n        (appointment) => appointment.doctor === selectedDoctor.id\r\n      );\r\n      setSelectedAppointments(doctorAppointments);\r\n    }\r\n  }, [selectedDoctor, doctors, appointments]); // Watch for changes in selectedDoctor\r\n\r\n  useEffect(() => {\r\n    // Update selectedAppointments when selectedDoctor changes\r\n    if (selectedDoctor) {\r\n      const doctorAppointments = advanceAppointments.filter(\r\n        (appointment) => appointment.doctor === selectedDoctor.id\r\n      );\r\n      setSelectedAdvanceAppointments(doctorAppointments);\r\n    }\r\n  }, [selectedDoctor, doctors, advanceAppointments]); // Watch for changes in selectedDoctor\r\n\r\n  const handleDoctorClick = (doctor) => {\r\n    setSelectedDoctor(doctor);\r\n    setSelectedTimeSlot('');\r\n  };\r\n\r\n  const handleAppointmentTime = (timeSlot, appointmentId, timeField, currentValue) => {\r\n    setSelectedTimeSlot(timeSlot);\r\n    setSelectedAppointmentId(appointmentId);\r\n    setSelectedTimeField(timeField);\r\n    setSelectedCurrentValue(currentValue);\r\n  }\r\n\r\n  const handleAppointmentToday = () => {\r\n    setSelectedAppointmentDate('appointment')\r\n    setSelectedTimeSlot('');\r\n  }\r\n\r\n  const handleAppointmentTomorrow = () => {\r\n    setSelectedAppointmentDate('advance-appointment')\r\n    setSelectedTimeSlot('');\r\n  }\r\n\r\n  const isPastTimeSlot = (timeSlot) => {\r\n    const currentTime = new Date();\r\n    const timeSlotHour = parseInt(timeSlot.split(':')[0]);\r\n    const timeSlotMinute = parseInt(timeSlot.split(':')[1]);\r\n    const currentHour = currentTime.getHours();\r\n    const currentMinute = currentTime.getMinutes();\r\n    \r\n    // Check if current hour is greater than time slot hour\r\n    if (currentHour > timeSlotHour) {\r\n        return true;\r\n    } else if (currentHour === timeSlotHour && currentMinute >= timeSlotMinute + 30) {\r\n        // If current hour is equal to time slot hour, \r\n        // check if current minute is 30 minutes or more past time slot minute\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='create-client'>\r\n\r\n        <div className='close-btn' onClick={() => {setOpenRegForm(false)}}>\r\n          <ion-icon name=\"close\"></ion-icon>\r\n        </div>\r\n\r\n        <div className='select-doctor'>\r\n          <p>Step 1. Select clinic branch</p>\r\n          <div className='select-doctor-btns'>\r\n            {branches.map((branch) => (\r\n              <button \r\n                key={branch.id}\r\n                onClick={() => handleBranchClick(branch.id)}\r\n                style={{ backgroundColor: selectedBranch === branch.id ? '#0b3d72' : '#5d9add' }}\r\n              >\r\n                {branch.branch_name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className='select-doctor'>\r\n          <p>Step 2. Select a doctor</p>\r\n          <div className='select-doctor-btns'>\r\n            {doctors.map((doctor) => (\r\n            <button key={doctor.id} onClick={() => handleDoctorClick(doctor)}\r\n            style={{backgroundColor: selectedDoctor === doctor ? '#0b3d72' : '#5d9add'}}>\r\n                {doctor.doctor_name}\r\n            </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {selectedDoctor && (\r\n          <div className='select-doctor'>\r\n            <p>Step 3. Select date of appointment</p>\r\n            <div className='select-doctor-btns'>\r\n              <button\r\n                onClick={handleAppointmentToday}\r\n                style={{ backgroundColor: selectedAppointmentDate === 'appointment' ? '#0b3d72' : '#5d9add' }}\r\n              >\r\n                Regular Appointment\r\n              </button>\r\n              <button\r\n                onClick={handleAppointmentTomorrow}\r\n                style={{ backgroundColor: selectedAppointmentDate === 'advance-appointment' ? '#0b3d72' : '#5d9add' }}\r\n              >\r\n                Advance Appointment\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {selectedAppointmentDate === 'appointment' && selectedAppointments.length > 0 && (\r\n                <div className='appointment'>\r\n                <p>Step 4. Select time of appointment</p>\r\n                <h3>Today's schedule of Dr./Dra. {selectedDoctor.doctor_name}</h3>\r\n                <div className='scheds'>\r\n                {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('8:00 AM') || appointment.time_8am_9am} style={{backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am)}>8:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('9:00 AM') || appointment.time_9am_10am} style={{backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am)}>9:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('10:00 AM') || appointment.time_10am_11am} style={{backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am)}>10:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('11:00 AM') || appointment.time_11am_12pm} style={{backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm)}>11:00 AM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('13:00 PM') || appointment.time_1pm_2pm} style={{backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm)}>1:00 PM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('14:00 PM') || appointment.time_2pm_3pm} style={{backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm)}>2:00 PM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('15:00 PM') || appointment.time_3pm_4pm} style={{backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm)}>3:00 PM</button>\r\n                        ))}\r\n                        {selectedAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={isPastTimeSlot('16:00 PM') || appointment.time_4pm_5pm} style={{backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm)}>4:00 PM</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n              {selectedDoctor && selectedAppointmentDate === 'advance-appointment' && selectedAdvanceAppointments.length > 0 && (\r\n                <div className='appointment'>\r\n                <p>Step 4. Select time of appointment</p>\r\n                <h3>Tomorrow's schedule of Dr./Dra. {selectedDoctor.doctor_name}</h3>\r\n                <div className='scheds'>\r\n                    {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_8am_9am} style={{backgroundColor: selectedTimeSlot === '8:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('8:00 AM', appointment.id, 'time_8am_9am', appointment.time_8am_9am)}>8:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_9am_10am} style={{backgroundColor: selectedTimeSlot === '9:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('9:00 AM', appointment.id, 'time_9am_10am', appointment.time_9am_10am)}>9:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_10am_11am} style={{backgroundColor: selectedTimeSlot === '10:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('10:00 AM', appointment.id, 'time_10am_11am', appointment.time_10am_11am)}>10:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_11am_12pm} style={{backgroundColor: selectedTimeSlot === '11:00 AM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('11:00 AM', appointment.id, 'time_11am_12pm', appointment.time_11am_12pm)}>11:00 AM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_1pm_2pm} style={{backgroundColor: selectedTimeSlot === '1:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('1:00 PM', appointment.id, 'time_1pm_2pm', appointment.time_1pm_2pm)}>1:00 PM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_2pm_3pm} style={{backgroundColor: selectedTimeSlot === '2:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('2:00 PM', appointment.id, 'time_2pm_3pm', appointment.time_2pm_3pm)}>2:00 PM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_3pm_4pm} style={{backgroundColor: selectedTimeSlot === '3:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('3:00 PM', appointment.id, 'time_3pm_4pm', appointment.time_3pm_4pm)}>3:00 PM</button>\r\n                        ))}\r\n                        {selectedAdvanceAppointments.map((appointment) => (\r\n                        <button className='sched-btns' disabled={appointment.time_4pm_5pm} style={{backgroundColor: selectedTimeSlot === '4:00 PM' ? '#0b3d72' : ''}} onClick={() => handleAppointmentTime('4:00 PM', appointment.id, 'time_4pm_5pm', appointment.time_4pm_5pm)}>4:00 PM</button>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n          <form onSubmit={handleClientFormSubmit}>\r\n            <p>Step 5. Fill out these informations</p>\r\n            <div className='multi-inputs'>\r\n\r\n                <input\r\n                  className='name'\r\n                  type=\"text\"\r\n                  name=\"first_name\"\r\n                  value={formData.first_name}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='First name'\r\n                  required\r\n                />\r\n\r\n                <input\r\n                  className='name'\r\n                  type=\"text\"\r\n                  name=\"last_name\"\r\n                  value={formData.last_name}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='Last name'\r\n                  required\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n\r\n                <input\r\n                  className='contacts'\r\n                  type=\"text\"\r\n                  name=\"contact_number\"\r\n                  value={formData.contact_number}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='Contact number'\r\n                  required\r\n                />\r\n\r\n                <input\r\n                  className='contacts'\r\n                  type=\"text\"\r\n                  name=\"emergency_contact_number\"\r\n                  value={formData.emergency_contact_number}\r\n                  onChange={handleClientFormChange}\r\n                  placeholder='Emergency contact number'\r\n                  required\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n              <label className='demographs'>\r\n                Age:\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"age\"\r\n                  value={formData.age}\r\n                  onChange={handleClientFormChange}\r\n                  required\r\n                />\r\n              </label>\r\n\r\n              <label className='demographs'>\r\n                Gender:\r\n                <select\r\n                  name=\"gender\"\r\n                  value={formData.gender}\r\n                  onChange={handleClientFormChange}\r\n                  required\r\n                >\r\n                  <option value=\"Male\">Male</option>\r\n                  <option value=\"Female\">Female</option>\r\n                  <option value=\"Other\">Other</option>\r\n                </select>\r\n              </label>\r\n\r\n              <label className='demographs'>\r\n                Birthday:\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"birthday\"\r\n                  value={formData.birthday}\r\n                  onChange={handleClientFormChange}\r\n                  required\r\n                />\r\n              </label>\r\n            </div>\r\n            \r\n            <label className='one-input'>\r\n              Email:\r\n              <input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                value={formData.email}\r\n                onChange={handleClientFormChange}\r\n                required\r\n              />\r\n            </label>\r\n\r\n            <label className='one-input'>\r\n              Medical History (Optional):\r\n              <textarea\r\n                name=\"medical_history\"\r\n                value={formData.medical_history}\r\n                onChange={handleClientFormChange}\r\n              />\r\n            </label>\r\n\r\n            <div className='multi-inputs'>\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"street_address\"\r\n                    value={formData.street_address}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Street address'\r\n                    required\r\n                  />\r\n\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"barangay\"\r\n                    value={formData.barangay}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Barangay'\r\n                    required\r\n                  />\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"city_town\"\r\n                    value={formData.city_town}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='City/Town'\r\n                    required\r\n                  />\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"province\"\r\n                    value={formData.province}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Province'\r\n                    required\r\n                  />\r\n            </div>\r\n\r\n            <div className='multi-inputs'>\r\n                  <input\r\n                    className='address'\r\n                    type=\"number\"\r\n                    name=\"postal_code\"\r\n                    value={formData.postal_code}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Postal Code'\r\n                    required\r\n                  />\r\n\r\n\r\n                  <input\r\n                    className='address'\r\n                    type=\"text\"\r\n                    name=\"country\"\r\n                    value={formData.country}\r\n                    onChange={handleClientFormChange}\r\n                    placeholder='Country'\r\n                    required\r\n                  />\r\n            </div>\r\n\r\n        {/* Add your branch_id and userID input fields here */}\r\n\r\n        <div className='form-actions'>\r\n            <button type=\"submit\" className='confirmation-btn-yes'>Submit</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {showCreationConfirmation && (\r\n        <div className=\"confirmation-popup\">\r\n          <div className=\"confirmation-popup-content\">\r\n            <h2>Confirm Submission</h2>\r\n            <p>Are you sure you want to submit the form?</p>\r\n            <div className=\"confirmation-buttons\">\r\n              <button onClick={handleCancel} className='confirmation-btn-no'>Cancel</button>\r\n              <button onClick={handleConfirm} className='confirmation-btn-yes'>Confirm</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default RegisterForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}